{"nodes": {"model.zendesk.zendesk_ticket_field_history": {"raw_sql": "{{ \n    config(\n        materialized='incremental',\n        partition_by = {'field': 'date_day', 'data_type': 'date'},\n        unique_key='ticket_day_id'\n        ) \n}}\n\n{%- set change_data_columns = adapter.get_columns_in_relation(ref('zendesk_field_history_scd')) -%}\n\nwith change_data as (\n\n    select *\n    from {{ ref('zendesk_field_history_scd') }}\n    {% if is_incremental() %}\n    where valid_from >= (select max(date_day) from {{ this }})\n    {% endif %}\n\n), calendar as (\n\n    select *\n    from {{ ref('zendesk_field_calendar_spine') }}\n    where date_day <= current_date\n    {% if is_incremental() %}\n    and date_day >= (select max(date_day) from {{ this }})\n    {% endif %}\n\n), joined as (\n\n    select \n        calendar.date_day,\n        calendar.ticket_id\n        {% for col in change_data_columns if col.name|lower not in ['ticket_id','valid_from','ticket_day_id'] %} \n        , {{ col.name }}\n        {% endfor %}\n    from calendar\n    left join change_data\n        on calendar.ticket_id = change_data.ticket_id\n        and calendar.date_day = change_data.valid_from\n\n), fill_values as (\n\n    select\n        date_day,\n        ticket_id    \n        -- For each ticket on each day, find the state of each column from the last record where a change occurred,\n        -- identified by the presence of a record from the SCD table on that day\n        {% for col in change_data_columns if col.name|lower not in  ['ticket_id','valid_from','ticket_day_id'] %} \n        \n        ,last_value({{ col.name }} ignore nulls) over \n          (partition by ticket_id order by date_day asc rows between unbounded preceding and current row) as {{ col.name }}\n\n        {% endfor %}\n\n    from joined\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['date_day','ticket_id'] )}} as ticket_day_id\n    from fill_values\n\n)\n\nselect *\nfrom surrogate_key", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "zendesk_ticket_field_history"], "unique_id": "model.zendesk.zendesk_ticket_field_history", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "zendesk_ticket_field_history.sql", "original_file_path": "models/zendesk_ticket_field_history.sql", "name": "zendesk_ticket_field_history", "resource_type": "model", "alias": "zendesk_ticket_field_history", "checksum": {"name": "sha256", "checksum": "d3650af8abe0ea4e89e08ae826701c9ff36d872d3cdde083c06ca6fda9b68d22"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "partition_by": {"field": "date_day", "data_type": "date"}, "unique_key": "ticket_day_id"}, "tags": [], "refs": [["zendesk_field_history_scd"], ["zendesk_field_history_scd"], ["zendesk_field_calendar_spine"]], "sources": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.zendesk.zendesk_field_history_scd", "model.zendesk.zendesk_field_history_scd", "model.zendesk.zendesk_field_calendar_spine"]}, "description": "A daily historical view of the ticket field values defined in the ticket_field_history_columns variable.  If variable values have changed more than once in a day, the latest value is displayed.\n", "columns": {"date_day": {"name": "date_day", "description": "The date of the day associated with the field values.", "meta": {}, "data_type": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "A ticket's unique identifier, it is automatically assigned when the ticket is created", "meta": {}, "data_type": null, "tags": []}, "ticket_day_id": {"name": "ticket_day_id", "description": "The unique key of the table, a surrogate key of date_day and ticket_id.", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/zendesk.yml", "build_path": null, "deferred": false}, "model.zendesk.zendesk_ticket_metrics": {"raw_sql": "with ticket_enriched as (\n\n  select *\n  from {{ ref('zendesk_ticket_enriched') }}\n\n), ticket_resolution_times_calendar as (\n\n  select *\n  from {{ ref('ticket_resolution_times_calendar') }}\n\n), ticket_reply_times_calendar as (\n\n  select *\n  from {{ ref('ticket_reply_times_calendar') }}\n\n), ticket_one_touch_resolution as (\n\n  select *\n  from {{ ref('ticket_one_touch_resolution') }}\n\n), ticket_work_time_calendar as (\n\n  select *\n  from {{ ref('ticket_work_time_calendar') }}\n\n-- business hour CTEs\n{% if var('using_schedules', True) %}\n\n), ticket_first_resolution_time_business as (\n\n  select *\n  from {{ ref('ticket_first_resolution_time_business') }}\n\n), ticket_full_resolution_time_business as (\n\n  select *\n  from {{ ref('ticket_full_resolution_time_business') }}\n\n), ticket_work_time_business as (\n\n  select *\n  from {{ ref('ticket_work_time_business') }}\n\n), ticket_first_reply_time_business as (\n\n  select *\n  from {{ ref('ticket_first_reply_time_business') }}\n\n{% endif %}\n-- end business hour CTEs\n\n), calendar_hour_metrics as (\n\nselect\n  ticket_enriched.*,\n  ticket_reply_times_calendar.first_reply_time_calendar_minutes,\n  ticket_reply_times_calendar.total_reply_time_calendar_minutes,\n  ticket_resolution_times_calendar.first_solved_at,\n  ticket_resolution_times_calendar.last_solved_at,\n  ticket_resolution_times_calendar.first_resolution_calendar_minutes,\n  ticket_resolution_times_calendar.final_resolution_calendar_minutes,\n  ticket_work_time_calendar.agent_wait_time_in_calendar_minutes,\n  ticket_work_time_calendar.requester_wait_time_in_calendar_minutes,\n  ticket_work_time_calendar.agent_work_time_in_calendar_minutes,\n  ticket_work_time_calendar.on_hold_time_in_calendar_minutes,\n  \n  case when ticket_enriched.status in ('solved','closed') and is_one_touch_resolution then true\n    else false end as is_one_touch_resolution\n\n\nfrom ticket_enriched\n\nleft join ticket_reply_times_calendar\n  using (ticket_id)\n\nleft join ticket_resolution_times_calendar\n  using (ticket_id)\n\nleft join ticket_one_touch_resolution\n  using (ticket_id)\n\nleft join ticket_work_time_calendar\n  using (ticket_id)\n\n{% if var('using_schedules', True) %}\n\n), business_hour_metrics as (\n\n  select \n    ticket_enriched.ticket_id,\n    ticket_first_resolution_time_business.first_resolution_business_minutes,\n    ticket_full_resolution_time_business.full_resolution_business_minutes,\n    ticket_first_reply_time_business.first_reply_time_business_minutes,\n    ticket_work_time_business.agent_wait_time_in_business_minutes,\n    ticket_work_time_business.requester_wait_time_in_business_minutes,\n    ticket_work_time_business.agent_work_time_in_business_minutes,\n    ticket_work_time_business.on_hold_time_in_business_minutes\n\n  from ticket_enriched\n\n  left join ticket_first_resolution_time_business\n    using (ticket_id)\n\n  left join ticket_full_resolution_time_business\n    using (ticket_id)\n  \n  left join ticket_first_reply_time_business\n    using (ticket_id)  \n  \n  left join ticket_work_time_business\n    using (ticket_id)\n\n)\n\nselect\n  calendar_hour_metrics.*,\n  business_hour_metrics.first_resolution_business_minutes,\n  business_hour_metrics.full_resolution_business_minutes\n\nfrom calendar_hour_metrics\n\nleft join business_hour_metrics \n  using (ticket_id)\n\n{% else %}\n\n) \n\nselect *\nfrom calendar_hour_metrics\n\n{% endif %}", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "zendesk_ticket_metrics"], "unique_id": "model.zendesk.zendesk_ticket_metrics", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "zendesk_ticket_metrics.sql", "original_file_path": "models/zendesk_ticket_metrics.sql", "name": "zendesk_ticket_metrics", "resource_type": "model", "alias": "zendesk_ticket_metrics", "checksum": {"name": "sha256", "checksum": "86e0b98d9693fa8411a99b818c1703bfd8b5ca90b108d75f39baadf338b8da17"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["zendesk_ticket_enriched"], ["ticket_resolution_times_calendar"], ["ticket_reply_times_calendar"], ["ticket_one_touch_resolution"], ["ticket_work_time_calendar"], ["ticket_first_resolution_time_business"], ["ticket_full_resolution_time_business"], ["ticket_work_time_business"], ["ticket_first_reply_time_business"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.zendesk.zendesk_ticket_enriched", "model.zendesk.ticket_resolution_times_calendar", "model.zendesk.ticket_reply_times_calendar", "model.zendesk.ticket_one_touch_resolution", "model.zendesk.ticket_work_time_calendar", "model.zendesk.ticket_first_resolution_time_business", "model.zendesk.ticket_full_resolution_time_business", "model.zendesk.ticket_work_time_business", "model.zendesk.ticket_first_reply_time_business"]}, "description": "Each record represents a Zendesk ticket, enhriched with metrics about reply times, resolution times and work times.  Calendar and business hours are supported", "columns": {"first_reply_time_calendar_minutes": {"name": "first_reply_time_calendar_minutes", "description": "The number of calendar minutes between when the ticket was created and when the first public agent response occurred", "meta": {}, "data_type": null, "tags": []}, "first_reply_time_business_minutes": {"name": "first_reply_time_business_minutes", "description": "The number of business minutes between when the ticket was created and when the first public agent response occurred", "meta": {}, "data_type": null, "tags": []}, "total_reply_time_calendar_minutes": {"name": "total_reply_time_calendar_minutes", "description": "The combined calendar time between all end-user comments and the next public agent response", "meta": {}, "data_type": null, "tags": []}, "first_solved_at": {"name": "first_solved_at", "description": "The time the ticket was first in 'solved' status", "meta": {}, "data_type": null, "tags": []}, "last_solved_at": {"name": "last_solved_at", "description": "The time the ticket was last in 'solved' status", "meta": {}, "data_type": null, "tags": []}, "first_resolution_calendar_minutes": {"name": "first_resolution_calendar_minutes", "description": "The number of calendar minutes between the ticket created time and the time the ticket was first set to solved status", "meta": {}, "data_type": null, "tags": []}, "final_resolution_calendar_minutes": {"name": "final_resolution_calendar_minutes", "description": "The number of calendar minutes between the ticket created time and the time the ticket was last set to solved status", "meta": {}, "data_type": null, "tags": []}, "is_one_touch_resolution": {"name": "is_one_touch_resolution", "description": "A boolean field indicating that the ticket has one public agent response and is in solved status", "meta": {}, "data_type": null, "tags": []}, "first_resolution_business_minutes": {"name": "first_resolution_business_minutes", "description": "The number of business minutes between the ticket created time and the time the ticket was first set to solved status", "meta": {}, "data_type": null, "tags": []}, "full_resolution_business_minutes": {"name": "full_resolution_business_minutes", "description": "The number of business minutes between the ticket created time and the time the ticket was last set to solved status", "meta": {}, "data_type": null, "tags": []}, "agent_wait_time_in_business_minutes": {"name": "agent_wait_time_in_business_minutes", "description": "The combined number of business minutes the ticket was in 'pending' status", "meta": {}, "data_type": null, "tags": []}, "requester_wait_time_in_business_minutes": {"name": "requester_wait_time_in_business_minutes", "description": "The combined number of business minutes the ticket was in 'new', 'open', or 'hold' status", "meta": {}, "data_type": null, "tags": []}, "agent_work_time_in_business_minutes": {"name": "agent_work_time_in_business_minutes", "description": "The combined number of business minutes the ticket was in 'new' or 'open' status", "meta": {}, "data_type": null, "tags": []}, "on_hold_time_in_business_minutes": {"name": "on_hold_time_in_business_minutes", "description": "The combined number of business minutes the ticket was on 'hold' status", "meta": {}, "data_type": null, "tags": []}, "agent_wait_time_in_calendar_minutes": {"name": "agent_wait_time_in_calendar_minutes", "description": "The combined number of calendar minutes the ticket was in 'pending' status", "meta": {}, "data_type": null, "tags": []}, "requester_wait_time_in_calendar_minutes": {"name": "requester_wait_time_in_calendar_minutes", "description": "The combined number of calendar minutes the ticket was in 'new', 'open', or 'hold' status", "meta": {}, "data_type": null, "tags": []}, "agent_work_time_in_calendar_minutes": {"name": "agent_work_time_in_calendar_minutes", "description": "The combined number of calendar minutes the ticket was in 'new' or 'open' status", "meta": {}, "data_type": null, "tags": []}, "on_hold_time_in_calendar_minutes": {"name": "on_hold_time_in_calendar_minutes", "description": "The combined number of calendar minutes the ticket was on 'hold' status", "meta": {}, "data_type": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "Automatically assigned when the ticket is created", "meta": {}, "data_type": null, "tags": []}, "url": {"name": "url", "description": "The API url of this ticket", "meta": {}, "data_type": null, "tags": []}, "assignee_id": {"name": "assignee_id", "description": "The agent currently assigned to the ticket", "meta": {}, "data_type": null, "tags": []}, "assignee_role": {"name": "assignee_role", "description": "The role of the agent currently assigned to the ticket", "meta": {}, "data_type": null, "tags": []}, "assignee_email": {"name": "assignee_email", "description": "The email of the agent currently assigned to the ticket", "meta": {}, "data_type": null, "tags": []}, "assignee_name": {"name": "assignee_name", "description": "The name of the agent currently assigned to the ticket", "meta": {}, "data_type": null, "tags": []}, "brand_id": {"name": "brand_id", "description": "Enterprise only. The id of the brand this ticket is associated with", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "When this record was created", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "The type of this ticket, possible values are problem, incident, question or task", "meta": {}, "data_type": null, "tags": []}, "subject": {"name": "subject", "description": "The value of the subject field for this ticket", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "Read-only first comment on the ticket", "meta": {}, "data_type": null, "tags": []}, "priority": {"name": "priority", "description": "The urgency with which the ticket should be addressed, possible values are urgent, high, normal and low", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "The state of the ticket, possible values are new, open, pending, hold, solved and closed", "meta": {}, "data_type": null, "tags": []}, "recipient": {"name": "recipient", "description": "The original recipient e-mail address of the ticket", "meta": {}, "data_type": null, "tags": []}, "requester_id": {"name": "requester_id", "description": "The user who requested this ticket", "meta": {}, "data_type": null, "tags": []}, "requester_role": {"name": "requester_role", "description": "The role of the user who requested this ticket", "meta": {}, "data_type": null, "tags": []}, "requester_email": {"name": "requester_email", "description": "The email of the user who requested this ticket", "meta": {}, "data_type": null, "tags": []}, "requester_name": {"name": "requester_name", "description": "The name of the user who requested this ticket", "meta": {}, "data_type": null, "tags": []}, "submitter_id": {"name": "submitter_id", "description": "The user who submitted the ticket. The submitter always becomes the author of the first comment on the ticket", "meta": {}, "data_type": null, "tags": []}, "submitter_role": {"name": "submitter_role", "description": "The role of the user who submitted the ticket.", "meta": {}, "data_type": null, "tags": []}, "submitter_email": {"name": "submitter_email", "description": "The email of the user who submitted the ticket.", "meta": {}, "data_type": null, "tags": []}, "submitter_name": {"name": "submitter_name", "description": "The name of the user who submitted the ticket.", "meta": {}, "data_type": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The organization of the requester", "meta": {}, "data_type": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "The name of the organization of the requester", "meta": {}, "data_type": null, "tags": []}, "group_id": {"name": "group_id", "description": "The group this ticket is assigned to", "meta": {}, "data_type": null, "tags": []}, "group_name": {"name": "group_name", "description": "The name of the group this ticket is assigned to", "meta": {}, "data_type": null, "tags": []}, "due_at": {"name": "due_at", "description": "If this is a ticket of type \"task\" it has a due date. Due date format uses ISO 8601 format.", "meta": {}, "data_type": null, "tags": []}, "ticket_form_id": {"name": "ticket_form_id", "description": "Enterprise only. The id of the ticket form to render for the ticket", "meta": {}, "data_type": null, "tags": []}, "is_public": {"name": "is_public", "description": "Is true if any comments are public, false otherwise", "meta": {}, "data_type": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When this record last got updated", "meta": {}, "data_type": null, "tags": []}, "created_channel": {"name": "created_channel", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "source_from_id": {"name": "source_from_id", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "source_from_title": {"name": "source_from_title", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "source_rel": {"name": "source_rel", "description": "The rel the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "source_to_address": {"name": "source_to_address", "description": "The address of the source the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "source_to_name": {"name": "source_to_name", "description": "The name of the source the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "ticket_tags": {"name": "ticket_tags", "description": "A list of all tags assigned to this ticket", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/zendesk.yml", "build_path": null, "deferred": false}, "model.zendesk.zendesk_sla_breach": {"raw_sql": "{{ config(enabled=var('using_sla_policy', True)) }}\n\n--final step where we union together all of the reply time and agent work time breaches\n\nwith reply_time_breach as (\n\n  select * \n  from {{ ref('reply_time_breach_combined') }}\n\n), agent_work_calendar_breach as (\n\n  select *\n  from {{ ref('agent_work_time_calendar_hours_breached') }}\n\n{% if var('using_schedules', True) %}\n\n), agent_work_business_breach as (\n\n  select *\n  from {{ ref('agent_work_time_business_hours_breached') }}\n\n{% endif %}\n\n), all_breaches_unioned as (\n  select\n    ticket_id,\n    metric,\n    sla_applied_at,\n    target,\n    in_business_hours,\n    breached_at\n  from reply_time_breach\n\nunion all\n\n  select\n    ticket_id,\n    'agent_work_time' as metric,\n    sla_applied_at,\n    target,\n    'false' as in_business_hours,\n    breached_at\n  from agent_work_calendar_breach\n\n{% if var('using_schedules', True) %}\n\nunion all \n\n  select \n    ticket_id,\n    'agent_work_time' as metric,\n    sla_applied_at,\n    target,\n    'true' as in_business_hours,\n    breached_at\n  from agent_work_business_breach\n\n{% endif %}\n\n)\n\nselect \n  *,\n  breached_at > current_timestamp as is_upcoming_breach\nfrom all_breaches_unioned", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "zendesk_sla_breach"], "unique_id": "model.zendesk.zendesk_sla_breach", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "zendesk_sla_breach.sql", "original_file_path": "models/zendesk_sla_breach.sql", "name": "zendesk_sla_breach", "resource_type": "model", "alias": "zendesk_sla_breach", "checksum": {"name": "sha256", "checksum": "86aab4f1d81d2724d209cb440f8b2cc7e41612cb1fc55a4d6129a2188475225a"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["reply_time_breach_combined"], ["agent_work_time_calendar_hours_breached"], ["agent_work_time_business_hours_breached"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.zendesk.reply_time_breach_combined", "model.zendesk.agent_work_time_calendar_hours_breached", "model.zendesk.agent_work_time_business_hours_breached"]}, "description": "Each record represents an SLA breach event. Calendar and business hour SLA breaches are supported. Only SLAs that have been breached or may breach in the future are included.", "columns": {"ticket_id": {"name": "ticket_id", "description": "A ticket's unique identifier, it is automatically assigned when the ticket is created", "meta": {}, "data_type": null, "tags": []}, "metric": {"name": "metric", "description": "The SLA metric, either agent_work_time, first_reply_time or next_reply_time", "meta": {}, "data_type": null, "tags": []}, "sla_applied_at": {"name": "sla_applied_at", "description": "When the SLA target was triggered. This is the starting time", "meta": {}, "data_type": null, "tags": []}, "target": {"name": "target", "description": "The SLA target, in minutes", "meta": {}, "data_type": null, "tags": []}, "in_business_hours": {"name": "in_business_hours", "description": "Boolean field indicating if the SLA target is in business hours (true) or calendar hours (false)", "meta": {}, "data_type": null, "tags": []}, "breached_at": {"name": "breached_at", "description": "The time or expected time of the SLA breach event", "meta": {}, "data_type": null, "tags": []}, "is_upcoming_breach": {"name": "is_upcoming_breach", "description": "Boolean field indicating that the SLA breach event is in the future (true) or past (false)", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/zendesk.yml", "build_path": null, "deferred": false}, "model.zendesk.zendesk_ticket_enriched": {"raw_sql": "-- this model enriches the ticket table with ticket-related dimensions.  This table will not include any metrics.\n-- for metrics, see ticket_metrics!\n\nwith ticket as (\n\n    select *\n    from {{ ref('stg_zendesk_ticket') }}\n\n), users as (\n\n    select *\n    from {{ ref('stg_zendesk_user') }}\n\n), ticket_group as (\n    \n    select *\n    from {{ ref('stg_zendesk_group') }}\n\n), organization as (\n\n    select *\n    from {{ ref('stg_zendesk_organization') }}\n\n), ticket_tags as (\n\n    select *\n    from {{ ref('ticket_tags') }}\n\n), joined as (\n\n    select \n\n        ticket.*,\n        requester.role as requester_role,\n        requester.email as requester_email,\n        requester.name as requester_name,\n        submitter.role as submitter_role,\n        submitter.email as submitter_email,\n        submitter.name as submitter_name,\n        assignee.role as assignee_role,\n        assignee.email as assignee_email,\n        assignee.name as assignee_name,\n        ticket_group.name as group_name,\n        organization.name as organization_name,\n        ticket_tags.ticket_tags\n\n    \n    from ticket\n\n    join users as requester\n        on requester.user_id = ticket.requester_id\n    \n    join users as submitter\n        on submitter.user_id = ticket.submitter_id\n    \n    left join users as assignee\n        on assignee.user_id = ticket.assignee_id\n\n    left join ticket_group\n        on ticket_group.group_id = ticket.group_id\n\n    left join organization\n        on organization.organization_id = ticket.organization_id\n\n    left join ticket_tags\n        on ticket_tags.ticket_id = ticket.ticket_id\n)\n\nselect *\nfrom joined", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "zendesk_ticket_enriched"], "unique_id": "model.zendesk.zendesk_ticket_enriched", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "zendesk_ticket_enriched.sql", "original_file_path": "models/zendesk_ticket_enriched.sql", "name": "zendesk_ticket_enriched", "resource_type": "model", "alias": "zendesk_ticket_enriched", "checksum": {"name": "sha256", "checksum": "34879ee4af398c9c8ae8328c490aa95afa39a843f0f9b7375a9688f3a1fe8a73"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_zendesk_ticket"], ["stg_zendesk_user"], ["stg_zendesk_group"], ["stg_zendesk_organization"], ["ticket_tags"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.zendesk_source.stg_zendesk_ticket", "model.zendesk_source.stg_zendesk_user", "model.zendesk_source.stg_zendesk_group", "model.zendesk_source.stg_zendesk_organization", "model.zendesk.ticket_tags"]}, "description": "Each record represents a Zendesk ticket, enriched with data about it's tags, assignees, requester, submitter, organization and group.", "columns": {"ticket_id": {"name": "ticket_id", "description": "Automatically assigned when the ticket is created", "meta": {}, "data_type": null, "tags": []}, "url": {"name": "url", "description": "The API url of this ticket", "meta": {}, "data_type": null, "tags": []}, "assignee_id": {"name": "assignee_id", "description": "The agent currently assigned to the ticket", "meta": {}, "data_type": null, "tags": []}, "assignee_role": {"name": "assignee_role", "description": "The role of the agent currently assigned to the ticket", "meta": {}, "data_type": null, "tags": []}, "assignee_email": {"name": "assignee_email", "description": "The email of the agent currently assigned to the ticket", "meta": {}, "data_type": null, "tags": []}, "assignee_name": {"name": "assignee_name", "description": "The name of the agent currently assigned to the ticket", "meta": {}, "data_type": null, "tags": []}, "brand_id": {"name": "brand_id", "description": "Enterprise only. The id of the brand this ticket is associated with", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "When this record was created", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "The type of this ticket, possible values are problem, incident, question or task", "meta": {}, "data_type": null, "tags": []}, "subject": {"name": "subject", "description": "The value of the subject field for this ticket", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "Read-only first comment on the ticket", "meta": {}, "data_type": null, "tags": []}, "priority": {"name": "priority", "description": "The urgency with which the ticket should be addressed, possible values are urgent, high, normal and low", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "The state of the ticket, possible values are new, open, pending, hold, solved and closed", "meta": {}, "data_type": null, "tags": []}, "recipient": {"name": "recipient", "description": "The original recipient e-mail address of the ticket", "meta": {}, "data_type": null, "tags": []}, "requester_id": {"name": "requester_id", "description": "The user who requested this ticket", "meta": {}, "data_type": null, "tags": []}, "requester_role": {"name": "requester_role", "description": "The role of the user who requested this ticket", "meta": {}, "data_type": null, "tags": []}, "requester_email": {"name": "requester_email", "description": "The email of the user who requested this ticket", "meta": {}, "data_type": null, "tags": []}, "requester_name": {"name": "requester_name", "description": "The name of the user who requested this ticket", "meta": {}, "data_type": null, "tags": []}, "submitter_id": {"name": "submitter_id", "description": "The user who submitted the ticket. The submitter always becomes the author of the first comment on the ticket", "meta": {}, "data_type": null, "tags": []}, "submitter_role": {"name": "submitter_role", "description": "The role of the user who submitted the ticket.", "meta": {}, "data_type": null, "tags": []}, "submitter_email": {"name": "submitter_email", "description": "The email of the user who submitted the ticket.", "meta": {}, "data_type": null, "tags": []}, "submitter_name": {"name": "submitter_name", "description": "The name of the user who submitted the ticket.", "meta": {}, "data_type": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The organization of the requester", "meta": {}, "data_type": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "The name of the organization of the requester", "meta": {}, "data_type": null, "tags": []}, "group_id": {"name": "group_id", "description": "The group this ticket is assigned to", "meta": {}, "data_type": null, "tags": []}, "group_name": {"name": "group_name", "description": "The name of the group this ticket is assigned to", "meta": {}, "data_type": null, "tags": []}, "due_at": {"name": "due_at", "description": "If this is a ticket of type \"task\" it has a due date. Due date format uses ISO 8601 format.", "meta": {}, "data_type": null, "tags": []}, "ticket_form_id": {"name": "ticket_form_id", "description": "Enterprise only. The id of the ticket form to render for the ticket", "meta": {}, "data_type": null, "tags": []}, "is_public": {"name": "is_public", "description": "Is true if any comments are public, false otherwise", "meta": {}, "data_type": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When this record last got updated", "meta": {}, "data_type": null, "tags": []}, "created_channel": {"name": "created_channel", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "source_from_id": {"name": "source_from_id", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "source_from_title": {"name": "source_from_title", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "source_rel": {"name": "source_rel", "description": "The rel the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "source_to_address": {"name": "source_to_address", "description": "The address of the source the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "source_to_name": {"name": "source_to_name", "description": "The name of the source the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "ticket_tags": {"name": "ticket_tags", "description": "A list of all tags assigned to this ticket", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/zendesk.yml", "build_path": null, "deferred": false}, "model.zendesk.sla_policy_applied": {"raw_sql": "{{ config(enabled=var('using_sla_policy', True)) }}\n\n-- step 1, figure out when sla was applied to tickets\n\n\n-- more on SLA policies here: https://support.zendesk.com/hc/en-us/articles/204770038-Defining-and-using-SLA-policies-Professional-and-Enterprise-\n-- SLA policies are calculated for next_reply_time, first_reply_time and agent_work_time.  If you're company uses other SLA metrics, and would like this\n-- package to support those, please reach out to the Fivetran team on Slack.\n\nwith ticket_field_history as (\n\n  select *\n  from {{ ref('stg_zendesk_ticket_field_history') }}\n\n), ticket as (\n\n  select *\n  from {{ ref('stg_zendesk_ticket') }}\n\n), sla_policy_applied as (\n\n  select\n    ticket_field_history.ticket_id,\n    ticket.created_at as ticket_created_at,\n    ticket.status as ticket_current_status,\n    ticket_field_history.field_name as metric,\n    ticket_field_history.valid_starting_at as sla_applied_at,\n    cast({{ json_extract('ticket_field_history.value', 'minutes') }} as {{ dbt_utils.type_int() }} ) as target,\n    {{ json_extract('ticket_field_history.value', 'in_business_hours') }} as in_business_hours\n  from ticket_field_history\n  join ticket\n    on ticket.ticket_id = ticket_field_history.ticket_id\n  where ticket_field_history.value is not null\n    and ticket_field_history.field_name in ('next_reply_time', 'first_reply_time', 'agent_work_time')\n\n)\nselect *\nfrom sla_policy_applied", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "sla_policy", "sla_policy_applied"], "unique_id": "model.zendesk.sla_policy_applied", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "sla_policy/sla_policy_applied.sql", "original_file_path": "models/sla_policy/sla_policy_applied.sql", "name": "sla_policy_applied", "resource_type": "model", "alias": "sla_policy_applied", "checksum": {"name": "sha256", "checksum": "f31cc41758c6f2f70fb997ae9f2a16b40cc5ff01f304c4ca19fab0180161dae5"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_zendesk_ticket_field_history"], ["stg_zendesk_ticket"]], "sources": [], "depends_on": {"macros": ["macro.zendesk.json_extract", "macro.dbt_utils.type_int"], "nodes": ["model.zendesk_source.stg_zendesk_ticket_field_history", "model.zendesk_source.stg_zendesk_ticket"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.reply_time_breach_combined": {"raw_sql": "{{ config(enabled=var('using_sla_policy', True)) }}\n\nwith reply_time_calendar_hours_breached as (\n  \n  select *\n  from {{ ref('reply_time_calendar_hours_breached') }}\n\n{% if var('using_schedules', True) %}\n\n), reply_time_business_hours_breached as (\n \n  select *\n  from {{ ref('reply_time_business_hours_breached') }}\n\n{% endif %}\n\n), ticket_field_history as (\n \n  select *\n  from {{ ref('stg_zendesk_ticket_field_history') }}\n\n), ticket_comment as (\n \n  select *\n  from {{ ref('stg_zendesk_ticket_comment') }}\n\n), users as (\n \n  select *\n  from {{ ref('stg_zendesk_user') }}\n\n\n\n), reply_time_breached_at as (\n\n  select \n    ticket_id,\n    metric,\n    sla_applied_at,\n    target,\n    in_business_hours,\n    breached_at\n  from reply_time_calendar_hours_breached\n\n{% if var('using_schedules', True) %}\n\n  union all\n\n  select \n    *\n  from reply_time_business_hours_breached\n{% endif %}\n\n-- Now that we have the breach time, see when the first reply after the sla policy was applied took place.\n), ticket_solved_times as (\n  select\n    ticket_id,\n    valid_starting_at as solved_at\n  from ticket_field_history\n  where field_name = 'status'\n  and value in ('solved','closed')\n\n), reply_time as (\n    select \n      ticket_comment.ticket_id,\n      ticket_comment.created_at as reply_at,\n      commenter.role\n    from ticket_comment\n    join users as commenter\n      on commenter.user_id = ticket_comment.user_id\n    where ticket_comment.is_public\n    and commenter.role in ('agent','admin')\n\n), reply_time_breached_at_with_next_reply_timestamp as (\n\n  select \n    reply_time_breached_at.*,\n    min(reply_at) as agent_reply_at,\n    min(solved_at) as next_solved_at\n  from reply_time_breached_at\n  left join reply_time\n    on reply_time.ticket_id = reply_time_breached_at.ticket_id\n    and reply_time.reply_at > reply_time_breached_at.sla_applied_at\n  left join ticket_solved_times\n    on reply_time_breached_at.ticket_id = ticket_solved_times.ticket_id\n    and ticket_solved_times.solved_at > reply_time_breached_at.sla_applied_at\n  group by 1,2,3,4,5,6\n\n), reply_time_breached_at_remove_old_sla as (\n  select \n    *,\n    lead(sla_applied_at) over (partition by ticket_id, metric, in_business_hours order by sla_applied_at) as updated_sla_policy_starts_at,\n    case when \n      lead(sla_applied_at) over (partition by ticket_id, metric, in_business_hours order by sla_applied_at) --updated sla policy start at time\n      < breached_at then true else false end as is_stale_sla_policy\n  from reply_time_breached_at_with_next_reply_timestamp\n  \n-- final query that filters out tickets that were solved or replied to before breach time\n), reply_time_breach as (\n  select \n    * \n  from reply_time_breached_at_remove_old_sla\n  where (breached_at < agent_reply_at and breached_at < next_solved_at)\n    or (breached_at < agent_reply_at and next_solved_at is null)\n    or (agent_reply_at is null and breached_at < next_solved_at)\n    or (agent_reply_at is null and next_solved_at is null)    \n\n)\n\nselect *\nfrom reply_time_breach", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "sla_policy", "reply_time_breach", "reply_time_breach_combined"], "unique_id": "model.zendesk.reply_time_breach_combined", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "sla_policy/reply_time_breach/reply_time_breach_combined.sql", "original_file_path": "models/sla_policy/reply_time_breach/reply_time_breach_combined.sql", "name": "reply_time_breach_combined", "resource_type": "model", "alias": "reply_time_breach_combined", "checksum": {"name": "sha256", "checksum": "bf152de13658e920b3b9b3a7bb85219a964ab66da3237bc754241249028e3a21"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["reply_time_calendar_hours_breached"], ["reply_time_business_hours_breached"], ["stg_zendesk_ticket_field_history"], ["stg_zendesk_ticket_comment"], ["stg_zendesk_user"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.zendesk.reply_time_calendar_hours_breached", "model.zendesk.reply_time_business_hours_breached", "model.zendesk_source.stg_zendesk_ticket_field_history", "model.zendesk_source.stg_zendesk_ticket_comment", "model.zendesk_source.stg_zendesk_user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.reply_time_calendar_hours_breached": {"raw_sql": "{{ config(enabled=var('using_sla_policy', True)) }}\n\n--REPLY TIME BREACH\n-- step 2, figure out when the sla will breach for sla's in calendar hours. the calculation is relatively straightforward.\n\nwith sla_policy_applied as (\n\n  select *\n  from {{ ref('sla_policy_applied') }}\n\n)\n\n  select\n    *,\n    {{ timestamp_add(\n        \"minute\",\n        \"cast(target as \" ~ dbt_utils.type_int() ~ \" )\",\n        \"sla_applied_at\" ) }} as breached_at\n  from sla_policy_applied\n  where in_business_hours = 'false'\n    and metric in ('next_reply_time', 'first_reply_time')", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "sla_policy", "reply_time_breach", "reply_time_calendar_hours_breached"], "unique_id": "model.zendesk.reply_time_calendar_hours_breached", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "sla_policy/reply_time_breach/reply_time_calendar_hours_breached.sql", "original_file_path": "models/sla_policy/reply_time_breach/reply_time_calendar_hours_breached.sql", "name": "reply_time_calendar_hours_breached", "resource_type": "model", "alias": "reply_time_calendar_hours_breached", "checksum": {"name": "sha256", "checksum": "c5c91d46caa8e19fbcd6c6947c57e0106301a7cbfba205d4fa7dd9ee6740e6af"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["sla_policy_applied"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.type_int", "macro.zendesk.timestamp_add"], "nodes": ["model.zendesk.sla_policy_applied"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.reply_time_business_hours_breached": {"raw_sql": "{{ config(enabled=enabled_vars(['using_sla_policy','using_schedules'])) }}\n\n\n-- step 3, determine when an SLA will breach for SLAs that are in business hours\n\nwith ticket_schedules as (\n \n  select *\n  from {{ ref('ticket_schedules') }}\n\n), schedule as (\n \n  select *\n  from {{ ref('stg_zendesk_schedule') }}\n\n), sla_policy_applied as (\n \n  select *\n  from {{ ref('sla_policy_applied') }}\n\n\n), schedule_business_hours as (\n  \n  select \n    schedule_id,\n    sum(end_time_utc - start_time_utc) as total_schedule_weekly_business_minutes\n  from schedule\n  group by 1\n\n), ticket_sla_applied_with_schedules as (\n\n  select \n    sla_policy_applied.*,\n    ticket_schedules.schedule_id,\n    round(\n      {{ timestamp_diff(\n        \"\" ~ dbt_utils.date_trunc('week', 'sla_policy_applied.sla_applied_at') ~ \"\",\n        'sla_policy_applied.sla_applied_at', \n        'second') }}/60\n      , 0) as start_time_in_minutes_from_week,\n      schedule_business_hours.total_schedule_weekly_business_minutes\n  from sla_policy_applied\n  left join ticket_schedules on sla_policy_applied.ticket_id = ticket_schedules.ticket_id\n    and {{ timestamp_add('second', -1, 'ticket_schedules.schedule_created_at') }} <= sla_policy_applied.sla_applied_at\n    and {{ timestamp_add('second', -1, 'ticket_schedules.schedule_invalidated_at') }} > sla_policy_applied.sla_applied_at\n  left join schedule_business_hours \n    on ticket_schedules.schedule_id = schedule_business_hours.schedule_id\n  where sla_policy_applied.in_business_hours = 'true'\n    and metric in ('next_reply_time', 'first_reply_time')\n  \n), weeks as (\n\n    {{ dbt_utils.generate_series(208) }}\n\n), weeks_cross_ticket_sla_applied as (\n\n    select \n\n      ticket_sla_applied_with_schedules.*,\n      generated_number - 1 as week_number\n\n    from ticket_sla_applied_with_schedules\n    cross join weeks\n    where {{ ceiling('target/total_schedule_weekly_business_minutes') }} >= generated_number - 1\n\n), weekly_periods as (\n  \n  select \n    weeks_cross_ticket_sla_applied.*,\n    greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n    (7*24*60) as ticket_week_end_time\n  from weeks_cross_ticket_sla_applied\n\n), intercepted_periods as (\n\n  select \n    weekly_periods.*,\n    schedule.start_time_utc as schedule_start_time,\n    schedule.end_time_utc as schedule_end_time,\n    (schedule.end_time_utc - greatest(ticket_week_start_time,schedule.start_time_utc)) as lapsed_business_minutes,\n    sum(schedule.end_time_utc - greatest(ticket_week_start_time,schedule.start_time_utc)) over \n      (partition by ticket_id, metric, sla_applied_at \n        order by week_number, schedule.start_time_utc\n        rows between unbounded preceding and current row) as sum_lapsed_business_minutes\n  from weekly_periods\n  join schedule on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n  \n), intercepted_periods_with_breach_flag as (\n  \n  select \n    *,\n    target - sum_lapsed_business_minutes as remaining_minutes,\n    case when (target - sum_lapsed_business_minutes) < 0 \n      and \n        (lag(target - sum_lapsed_business_minutes) over\n        (partition by ticket_id, metric, sla_applied_at order by week_number, schedule_start_time) >= 0 \n        or \n        lag(target - sum_lapsed_business_minutes) over\n        (partition by ticket_id, metric, sla_applied_at order by week_number, schedule_start_time) is null) \n        then true else false end as is_breached_during_schedule -- this flags the scheduled period on which the breach took place\n  from intercepted_periods\n\n), intercepted_periods_with_breach_flag_calculated as (\n\n  select\n    *,\n    schedule_end_time + remaining_minutes as breached_at_minutes,\n    {{ dbt_utils.date_trunc('week', 'sla_applied_at') }} as starting_point,\n    {{ timestamp_add(\n        \"minute\",\n        \"cast(((7*24*60) * week_number) + (schedule_end_time + remaining_minutes) as \" ~ dbt_utils.type_int() ~ \" )\",\n        \"\" ~ dbt_utils.date_trunc('week', 'sla_applied_at') ~ \"\" ) }} as breached_at\n  from intercepted_periods_with_breach_flag\n  where is_breached_during_schedule\n\n), reply_time_business_hours_breached as (\n\n  select\n    ticket_id,\n    metric,\n    sla_applied_at,\n    target,\n    in_business_hours,\n    breached_at\n  from intercepted_periods_with_breach_flag_calculated\n\n) \n\nselect * \nfrom reply_time_business_hours_breached", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "sla_policy", "reply_time_breach", "reply_time_business_hours_breached"], "unique_id": "model.zendesk.reply_time_business_hours_breached", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "sla_policy/reply_time_breach/reply_time_business_hours_breached.sql", "original_file_path": "models/sla_policy/reply_time_breach/reply_time_business_hours_breached.sql", "name": "reply_time_business_hours_breached", "resource_type": "model", "alias": "reply_time_business_hours_breached", "checksum": {"name": "sha256", "checksum": "da236800a36abac28e8d00d72c724d970ecfc1d6f719942666cf3971ef995086"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["ticket_schedules"], ["stg_zendesk_schedule"], ["sla_policy_applied"]], "sources": [], "depends_on": {"macros": ["macro.zendesk.enabled_vars", "macro.dbt_utils.date_trunc", "macro.zendesk.timestamp_diff", "macro.zendesk.timestamp_add", "macro.dbt_utils.generate_series", "macro.zendesk.ceiling", "macro.dbt_utils.type_int"], "nodes": ["model.zendesk.ticket_schedules", "model.zendesk_source.stg_zendesk_schedule", "model.zendesk.sla_policy_applied"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.agent_work_time_filtered_statuses": {"raw_sql": "{{ config(enabled=var('using_sla_policy', True)) }}\n\nwith agent_work_time_sla as (\n\n  select *\n  from {{ ref('sla_policy_applied') }}\n  where metric = 'agent_work_time'\n\n), ticket_historical_status as (\n\n  select *\n  from {{ ref('ticket_historical_status') }}\n    \n), agent_work_time_filtered_statuses as (\n\n  select  \n    ticket_historical_status.ticket_id,\n    greatest(ticket_historical_status.valid_starting_at, agent_work_time_sla.sla_applied_at) as valid_starting_at,\n    coalesce(\n      ticket_historical_status.valid_ending_at, \n      {{ timestamp_add('day', 30, \"\" ~ dbt_utils.current_timestamp() ~ \"\") }} ) as valid_ending_at, --assumes current status continues into the future. This is necessary to predict future SLA breaches (not just past).\n    ticket_historical_status.status as ticket_status,\n    agent_work_time_sla.sla_applied_at,\n    agent_work_time_sla.target,    \n    agent_work_time_sla.ticket_created_at,\n    agent_work_time_sla.in_business_hours\n  from ticket_historical_status\n  join agent_work_time_sla\n    on ticket_historical_status.ticket_id = agent_work_time_sla.ticket_id\n  where ticket_historical_status.status in ('new', 'open') -- these are the only statuses that count as \"agent work time\"\n  and sla_applied_at < valid_ending_at\n\n)\nselect *\nfrom agent_work_time_filtered_statuses", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "sla_policy", "agent_work_time_breach", "agent_work_time_filtered_statuses"], "unique_id": "model.zendesk.agent_work_time_filtered_statuses", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "sla_policy/agent_work_time_breach/agent_work_time_filtered_statuses.sql", "original_file_path": "models/sla_policy/agent_work_time_breach/agent_work_time_filtered_statuses.sql", "name": "agent_work_time_filtered_statuses", "resource_type": "model", "alias": "agent_work_time_filtered_statuses", "checksum": {"name": "sha256", "checksum": "d27ac634b4d7248ef302f03430ce46b498d3834462151ac447f2793e822cb9d4"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["sla_policy_applied"], ["ticket_historical_status"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.zendesk.timestamp_add"], "nodes": ["model.zendesk.sla_policy_applied", "model.zendesk.ticket_historical_status"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.agent_work_time_calendar_hours_breached": {"raw_sql": "{{ config(enabled=var('using_sla_policy', True)) }}\n\n-- Calculate breach time for agent work time, calendar hours\nwith agent_work_time_filtered_statuses as (\n\n  select *\n  from {{ ref('agent_work_time_filtered_statuses') }}\n  where in_business_hours = 'false'\n\n), agent_work_time_calendar_minutes as (\n\n  select \n    *,\n    {{ timestamp_diff(\n        'valid_starting_at',\n        'valid_ending_at',\n        'minute' )}} as calendar_minutes,\n    sum({{ timestamp_diff(\n            'valid_starting_at', \n            'valid_ending_at', \n            'minute') }} ) \n      over (partition by ticket_id, sla_applied_at order by valid_starting_at rows between unbounded preceding and current row) as running_total_calendar_minutes\n  from agent_work_time_filtered_statuses\n\n), agent_work_time_calendar_minutes_flagged as (\n\nselect \n  agent_work_time_calendar_minutes.*,\n  target - running_total_calendar_minutes as remaining_target_minutes,\n  case when (target - running_total_calendar_minutes) < 0 \n      and \n        (lag(target - running_total_calendar_minutes) over\n        (partition by ticket_id, sla_applied_at order by valid_starting_at) >= 0 \n        or \n        lag(target - running_total_calendar_minutes) over\n        (partition by ticket_id, sla_applied_at order by valid_starting_at) is null) \n        then true else false end as is_breached_during_schedule\n        \nfrom  agent_work_time_calendar_minutes\n\n)\n\n  select\n    *,\n    (remaining_target_minutes + calendar_minutes) as breach_minutes,\n    {{ timestamp_add(\n      'minute',\n      '(remaining_target_minutes + calendar_minutes)',\n      'valid_starting_at', \n      ) }} as breached_at\n  from agent_work_time_calendar_minutes_flagged\n  where is_breached_during_schedule", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "sla_policy", "agent_work_time_breach", "agent_work_time_calendar_hours_breached"], "unique_id": "model.zendesk.agent_work_time_calendar_hours_breached", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "sla_policy/agent_work_time_breach/agent_work_time_calendar_hours_breached.sql", "original_file_path": "models/sla_policy/agent_work_time_breach/agent_work_time_calendar_hours_breached.sql", "name": "agent_work_time_calendar_hours_breached", "resource_type": "model", "alias": "agent_work_time_calendar_hours_breached", "checksum": {"name": "sha256", "checksum": "c4a1a068e4f70c6296a310ad119a1bf45b8c28331ce118c14623c2b8924e2dfc"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["agent_work_time_filtered_statuses"]], "sources": [], "depends_on": {"macros": ["macro.zendesk.timestamp_diff", "macro.zendesk.timestamp_add"], "nodes": ["model.zendesk.agent_work_time_filtered_statuses"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.agent_work_time_business_hours_breached": {"raw_sql": "{{ config(enabled=enabled_vars(['using_sla_policy','using_schedules'])) }}\n\n-- AGENT WORK TIME\n-- This is complicated, as SLAs minutes are only counted while the ticket is in 'new' or 'open' status.\n\n-- Additionally, for business hours, only 'new' or 'open' status hours are counted if they are also during business hours\nwith agent_work_time_filtered_statuses as (\n\n  select *\n  from {{ ref('agent_work_time_filtered_statuses') }}\n  where in_business_hours = 'true'\n\n), schedule as (\n\n  select * \n  from {{ ref('stg_zendesk_schedule') }}\n\n), ticket_schedules as (\n\n  select * \n  from {{ ref('ticket_schedules') }}\n  \n-- cross schedules with work time\n), ticket_status_crossed_with_schedule as (\n  \n    select\n      agent_work_time_filtered_statuses.ticket_id,\n      agent_work_time_filtered_statuses.sla_applied_at,\n--       agent_work_time_filtered_statuses.ticket_created_at,\n      agent_work_time_filtered_statuses.target,      \n      ticket_schedules.schedule_id,\n      greatest(valid_starting_at, schedule_created_at) as valid_starting_at,\n      least(valid_ending_at, schedule_invalidated_at) as valid_ending_at\n    from agent_work_time_filtered_statuses\n    left join ticket_schedules\n      on agent_work_time_filtered_statuses.ticket_id = ticket_schedules.ticket_id\n    where {{ timestamp_diff(\n              'greatest(valid_starting_at, schedule_created_at)', \n              'least(valid_ending_at, schedule_invalidated_at)', \n              'second') }} > 0\n\n\n), ticket_full_solved_time as (\n\n    select \n      ticket_status_crossed_with_schedule.*,\n      round({{ timestamp_diff(\n              \"\" ~ dbt_utils.date_trunc(\n                  'week',\n                  'ticket_status_crossed_with_schedule.valid_starting_at') ~ \"\", \n              'ticket_status_crossed_with_schedule.valid_starting_at', \n              'second') }} /60,\n            0) as valid_starting_at_in_minutes_from_week,\n      round({{ timestamp_diff(\n              'ticket_status_crossed_with_schedule.valid_starting_at', \n              'ticket_status_crossed_with_schedule.valid_ending_at',\n              'second') }} /60,\n            0) as raw_delta_in_minutes\n    from ticket_status_crossed_with_schedule\n    group by 1, 2, 3, 4, 5, 6, 7\n\n), weeks as (\n\n    {{ dbt_utils.generate_series(208) }}\n\n), weeks_cross_ticket_full_solved_time as (\n    \n    select \n      ticket_full_solved_time.*,\n      generated_number - 1 as week_number\n    from ticket_full_solved_time\n    cross join weeks\n    where floor((valid_starting_at_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number -1\n\n), weekly_period_agent_work_time as (\n\n    select \n\n      ticket_id,\n      sla_applied_at,\n      valid_starting_at,\n      valid_ending_at,\n      target,\n      valid_starting_at_in_minutes_from_week,\n      raw_delta_in_minutes,\n      week_number,\n      schedule_id,\n      greatest(0, valid_starting_at_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time_minute,\n      least(valid_starting_at_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time_minute\n    \n    from weeks_cross_ticket_full_solved_time\n\n), intercepted_periods_agent as (\n  \n    select \n      weekly_period_agent_work_time.ticket_id,\n      weekly_period_agent_work_time.sla_applied_at,\n      weekly_period_agent_work_time.target,\n      weekly_period_agent_work_time.valid_starting_at,\n      weekly_period_agent_work_time.valid_ending_at,\n      weekly_period_agent_work_time.week_number,\n      weekly_period_agent_work_time.ticket_week_start_time_minute,\n      weekly_period_agent_work_time.ticket_week_end_time_minute,\n      schedule.start_time_utc as schedule_start_time,\n      schedule.end_time_utc as schedule_end_time,\n      least(ticket_week_end_time_minute, schedule.end_time_utc) - greatest(weekly_period_agent_work_time.ticket_week_start_time_minute, schedule.start_time_utc) as scheduled_minutes\n    from weekly_period_agent_work_time\n    join schedule on ticket_week_start_time_minute <= schedule.end_time_utc \n      and ticket_week_end_time_minute >= schedule.start_time_utc\n      and weekly_period_agent_work_time.schedule_id = schedule.schedule_id\n\n), intercepted_periods_with_running_total as (\n  \n    select \n      *,\n      sum(scheduled_minutes) over \n        (partition by ticket_id, sla_applied_at \n          order by valid_starting_at, week_number, schedule_end_time\n          rows between unbounded preceding and current row)\n        as running_total_scheduled_minutes\n\n    from intercepted_periods_agent\n\n), intercepted_periods_agent_with_breach_flag as (\n  select \n    intercepted_periods_with_running_total.*,\n    target - running_total_scheduled_minutes as remaining_target_minutes,\n    case when (target - running_total_scheduled_minutes) = 0 then true\n       when (target - running_total_scheduled_minutes) < 0 \n        and \n          (lag(target - running_total_scheduled_minutes) over\n          (partition by ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) > 0 \n          or \n          lag(target - running_total_scheduled_minutes) over\n          (partition by ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) is null) \n          then true else false end as is_breached_during_schedule\n          \n  from  intercepted_periods_with_running_total\n\n), intercepted_periods_agent_filtered as (\n\n  select\n    *,\n    (remaining_target_minutes + scheduled_minutes) as breach_minutes,\n    greatest(ticket_week_start_time_minute, schedule_start_time) + (remaining_target_minutes + scheduled_minutes) as breach_minutes_from_week\n  from intercepted_periods_agent_with_breach_flag\n  where is_breached_during_schedule\n  \n-- Now we have agent work time business hours breached_at timestamps. Only SLAs that have been breached will appear in this list, otherwise\n-- would be filtered out in the above\n), agent_work_business_breach as (\n  \n  select \n    *,\n    {{ timestamp_add(\n      \"minute\",\n      \"cast(((7*24*60) * week_number) + breach_minutes_from_week as \" ~ dbt_utils.type_int() ~ \" )\",\n      \"\" ~ dbt_utils.date_trunc('week', 'valid_starting_at') ~ \"\",\n      ) }} as breached_at\n  from intercepted_periods_agent_filtered\n\n) \n\nselect * \nfrom agent_work_business_breach", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "sla_policy", "agent_work_time_breach", "agent_work_time_business_hours_breached"], "unique_id": "model.zendesk.agent_work_time_business_hours_breached", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "sla_policy/agent_work_time_breach/agent_work_time_business_hours_breached.sql", "original_file_path": "models/sla_policy/agent_work_time_breach/agent_work_time_business_hours_breached.sql", "name": "agent_work_time_business_hours_breached", "resource_type": "model", "alias": "agent_work_time_business_hours_breached", "checksum": {"name": "sha256", "checksum": "911c8102f26e96c377e1cbd7f92a0d9145100e236987966f2168dba2492886d7"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["agent_work_time_filtered_statuses"], ["stg_zendesk_schedule"], ["ticket_schedules"]], "sources": [], "depends_on": {"macros": ["macro.zendesk.enabled_vars", "macro.zendesk.timestamp_diff", "macro.dbt_utils.date_trunc", "macro.dbt_utils.generate_series", "macro.dbt_utils.type_int", "macro.zendesk.timestamp_add"], "nodes": ["model.zendesk.agent_work_time_filtered_statuses", "model.zendesk_source.stg_zendesk_schedule", "model.zendesk.ticket_schedules"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.ticket_one_touch_resolution": {"raw_sql": "with public_comments as (\n  \n  select *\n  from {{ ref('public_comments') }}\n\n), internal_comments as (\n\n  select \n    ticket_id,\n    sum(case when commenter_role = 'internal_comment' then 1\n        else 0 end) as count_internal_comments\n  from public_comments\n  group by 1\n\n), flagged as (\n\n  select \n    *,\n    count_internal_comments = 1 as is_one_touch_resolution\n  from internal_comments\n\n)\nselect *\nfrom flagged", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "reply_times", "ticket_one_touch_resolution"], "unique_id": "model.zendesk.ticket_one_touch_resolution", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "reply_times/ticket_one_touch_resolution.sql", "original_file_path": "models/reply_times/ticket_one_touch_resolution.sql", "name": "ticket_one_touch_resolution", "resource_type": "model", "alias": "ticket_one_touch_resolution", "checksum": {"name": "sha256", "checksum": "cebb89daba604b6a192dffb6b89600fdf2429053d76497c8bf9003480b1f7fd8"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["public_comments"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.zendesk.public_comments"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.public_comments": {"raw_sql": "with public_ticket_comment as (\n\n    select *\n    from {{ ref('stg_zendesk_ticket_comment') }}\n    where is_public\n\n), users as (\n\n    select *\n    from {{ ref('stg_zendesk_user') }}\n\n), joined as (\n\n    select \n\n        public_ticket_comment.*,\n        case when commenter.role = 'end-user' then 'external_comment'\n            when commenter.role in ('agent','admin') then 'internal_comment'\n            else 'unknown' end as commenter_role\n    \n    from public_ticket_comment\n    \n    join users as commenter\n        on commenter.user_id = public_ticket_comment.user_id\n\n), add_previous_commenter_role as (\n\n    select\n        *,\n        coalesce(\n            lag(commenter_role) over (partition by ticket_id order by created_at)\n            , 'first_comment') \n            as previous_commenter_role\n\n    from joined\n)\n\nselect * \nfrom add_previous_commenter_role", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "reply_times", "public_comments"], "unique_id": "model.zendesk.public_comments", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "reply_times/public_comments.sql", "original_file_path": "models/reply_times/public_comments.sql", "name": "public_comments", "resource_type": "model", "alias": "public_comments", "checksum": {"name": "sha256", "checksum": "297df9033eb5f3810f415a1da0d3581d835b2a7c7d5d95d5cdd8c0ff71623bdc"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_zendesk_ticket_comment"], ["stg_zendesk_user"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.zendesk_source.stg_zendesk_ticket_comment", "model.zendesk_source.stg_zendesk_user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.ticket_reply_times": {"raw_sql": "with ticket_public_comments as (\n\n    select *\n    from {{ ref('public_comments') }}\n\n), end_user_comments as (\n  \n  select \n    ticket_id,\n    created_at as end_user_comment_created_at,\n    previous_commenter_role = 'first_comment' as is_first_comment\n  from ticket_public_comments \n  where commenter_role = 'external_comment'\n    and ticket_public_comments.previous_commenter_role != 'external_comment' -- we only care about net new end user comments\n\n), reply_timestamps as (  \n\n  select \n    end_user_comments.*,\n    min(agent_comments.created_at) as agent_responded_at\n  from end_user_comments\n  left join ticket_public_comments as agent_comments\n    on agent_comments.ticket_id = end_user_comments.ticket_id\n    and agent_comments.commenter_role = 'internal_comment'\n    and agent_comments.previous_commenter_role != 'internal_comment' -- we only care about net new agent comments\n    and agent_comments.created_at > end_user_comments.end_user_comment_created_at\n  group by 1,2,3\n\n)\n\n  select\n    *,\n    {{ timestamp_diff(\n      'end_user_comment_created_at',\n      'agent_responded_at',\n      'minute') }} as reply_time_calendar_minutes\n  from reply_timestamps\n  order by 1,2", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "reply_times", "ticket_reply_times"], "unique_id": "model.zendesk.ticket_reply_times", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "reply_times/ticket_reply_times.sql", "original_file_path": "models/reply_times/ticket_reply_times.sql", "name": "ticket_reply_times", "resource_type": "model", "alias": "ticket_reply_times", "checksum": {"name": "sha256", "checksum": "bc806d421ae52eeb6e4b3520a9cdc90a672580ac6c4f938a0848eba2cb7285be"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["public_comments"]], "sources": [], "depends_on": {"macros": ["macro.zendesk.timestamp_diff"], "nodes": ["model.zendesk.public_comments"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.ticket_first_reply_time_business": {"raw_sql": "{{ config(enabled=var('using_schedules', True)) }}\n\nwith ticket_reply_times as (\n\n    select *\n    from {{ ref('ticket_reply_times') }}\n\n), ticket_schedules as (\n\n    select *\n    from {{ ref('ticket_schedules') }}\n\n), schedule as (\n\n    select *\n    from {{ ref('stg_zendesk_schedule') }}\n\n), first_reply_time as (\n\n    select\n      ticket_id,\n      end_user_comment_created_at,\n      agent_responded_at\n\n    from ticket_reply_times\n    where is_first_comment\n\n), ticket_first_reply_time as (\n\n  select \n    first_reply_time.ticket_id,\n    ticket_schedules.schedule_created_at,\n    ticket_schedules.schedule_invalidated_at,\n    ticket_schedules.schedule_id,\n    round({{ timestamp_diff(\n            \"\" ~ dbt_utils.date_trunc('week', 'ticket_schedules.schedule_created_at') ~ \"\", \n            'ticket_schedules.schedule_created_at',\n            'second') }} /60,\n          0) as start_time_in_minutes_from_week,\n    greatest(0,\n      round(\n        {{ timestamp_diff(\n          'ticket_schedules.schedule_created_at',\n          'least(ticket_schedules.schedule_invalidated_at, min(first_reply_time.agent_responded_at))',\n          'second') }}/60\n      , 0)) as raw_delta_in_minutes\n  \n  from first_reply_time\n  join ticket_schedules on first_reply_time.ticket_id = ticket_schedules.ticket_id\n  group by 1, 2, 3, 4\n\n), weeks as (\n\n    {{ dbt_utils.generate_series(208) }}\n\n), weeks_cross_ticket_first_reply as (\n\n    select \n\n      ticket_first_reply_time.*,\n      generated_number - 1 as week_number\n\n    from ticket_first_reply_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number - 1\n\n), weekly_periods as (\n  \n    select \n      weeks_cross_ticket_first_reply.*, \n      greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n      least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n    from weeks_cross_ticket_first_reply\n\n), intercepted_periods as (\n\n  select ticket_id,\n         week_number,\n         weekly_periods.schedule_id,\n         ticket_week_start_time,\n         ticket_week_end_time,\n         schedule.start_time_utc as schedule_start_time,\n         schedule.end_time_utc as schedule_end_time,\n         least(ticket_week_end_time, schedule.end_time_utc) - greatest(ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n  from weekly_periods\n  join schedule on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n\n)\n\n  select ticket_id,\n         sum(scheduled_minutes) as first_reply_time_business_minutes\n  from intercepted_periods\n  group by 1", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "reply_times", "ticket_first_reply_time_business"], "unique_id": "model.zendesk.ticket_first_reply_time_business", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "reply_times/ticket_first_reply_time_business.sql", "original_file_path": "models/reply_times/ticket_first_reply_time_business.sql", "name": "ticket_first_reply_time_business", "resource_type": "model", "alias": "ticket_first_reply_time_business", "checksum": {"name": "sha256", "checksum": "3a996c35313cba8a32b36bc37341b1212bdef6d9463405a0b11f131f3b9263f9"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["ticket_reply_times"], ["ticket_schedules"], ["stg_zendesk_schedule"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.zendesk.timestamp_diff", "macro.dbt_utils.generate_series"], "nodes": ["model.zendesk.ticket_reply_times", "model.zendesk.ticket_schedules", "model.zendesk_source.stg_zendesk_schedule"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.ticket_reply_times_calendar": {"raw_sql": "with ticket as (\n\n  select *\n  from {{ ref('stg_zendesk_ticket') }}\n\n), ticket_reply_times as (\n\n  select *\n  from {{ ref('ticket_reply_times') }}\n\n)\n\nselect\n\n  ticket.ticket_id,\n  sum(case when is_first_comment then reply_time_calendar_minutes\n    else null end) as first_reply_time_calendar_minutes,\n  sum(reply_time_calendar_minutes) as total_reply_time_calendar_minutes --total combined time the customer waits for internal response\n  \nfrom ticket\nleft join ticket_reply_times\n  using (ticket_id)\n\ngroup by 1", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "reply_times", "ticket_reply_times_calendar"], "unique_id": "model.zendesk.ticket_reply_times_calendar", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "reply_times/ticket_reply_times_calendar.sql", "original_file_path": "models/reply_times/ticket_reply_times_calendar.sql", "name": "ticket_reply_times_calendar", "resource_type": "model", "alias": "ticket_reply_times_calendar", "checksum": {"name": "sha256", "checksum": "dc6a726505eeba4c77624d939f24f6f1da8c88419427bd76ba4eba49777e7374"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_zendesk_ticket"], ["ticket_reply_times"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.zendesk_source.stg_zendesk_ticket", "model.zendesk.ticket_reply_times"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.zendesk_field_calendar_spine": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        partition_by = {'field': 'date_day', 'data_type': 'date'},\n        unique_key='ticket_day_id'\n    )\n}}\n\nwith calendar as (\n\n    select *\n    from {{ ref('zendesk_calendar_spine') }}\n    {% if is_incremental() %}\n    where date_day >= (select max(date_day) from {{ this }})\n    {% endif %}\n\n), ticket as (\n\n    select *\n    from {{ var('ticket') }}\n    \n), joined as (\n\n    select \n        calendar.date_day,\n        ticket.ticket_id\n    from calendar\n    inner join ticket\n        on calendar.date_day >= cast(ticket.created_at as date)\n\n), surrogate_key as (\n\n    select\n        *,\n        {{ dbt_utils.surrogate_key(['date_day','ticket_id']) }} as ticket_day_id\n    from joined\n\n)\n\nselect *\nfrom surrogate_key", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "ticket_history", "zendesk_field_calendar_spine"], "unique_id": "model.zendesk.zendesk_field_calendar_spine", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "ticket_history/zendesk_field_calendar_spine.sql", "original_file_path": "models/ticket_history/zendesk_field_calendar_spine.sql", "name": "zendesk_field_calendar_spine", "resource_type": "model", "alias": "zendesk_field_calendar_spine", "checksum": {"name": "sha256", "checksum": "3fe92707cf8f63e1372951a7e504d63453c890109b5e58a0c8f8a24cdc4f3d9d"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "partition_by": {"field": "date_day", "data_type": "date"}, "unique_key": "ticket_day_id"}, "tags": [], "refs": [["zendesk_calendar_spine"], ["stg_zendesk_ticket"]], "sources": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.zendesk.zendesk_calendar_spine", "model.zendesk_source.stg_zendesk_ticket"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.zendesk_field_history_pivot": {"raw_sql": "{{ \n    config(\n        materialized='incremental',\n        partition_by = {'field': 'date_day', 'data_type': 'date'},\n        unique_key='ticket_day_id'\n        ) \n}}\n\n{% if execute -%}\n    {% set results = run_query('select distinct field_name from ' ~ var('field_history')) %}\n    {% set results_list = results.columns[0].values() %}\n{% endif -%}\n\nwith field_history as (\n\n    select *\n    from {{ var('field_history') }}\n    {% if is_incremental() %}\n    where cast({{ dbt_utils.dateadd('day', -1, 'valid_starting_at') }} as date) >= (select max(date_day) from {{ this }})\n    {% endif %}\n\n), event_order as (\n\n    select \n        *,\n        row_number() over (\n            partition by cast(valid_starting_at as date), ticket_id, field_name\n            order by valid_starting_at desc\n            ) as row_num\n    from field_history\n\n), filtered as (\n\n    -- Find the last event that occurs on each day for each ticket\n\n    select *\n    from event_order\n    where row_num = 1\n\n), pivot as (\n\n    -- For each column that is in both the ticket_field_history_columns variable and the field_history table,\n    -- pivot out the value into it's own column. This will feed the daily slowly changing dimension model.\n\n    select \n        ticket_id,\n        cast({{ dbt_utils.dateadd('day', 0, 'valid_starting_at') }} as date) as date_day\n\n        {% for col in results_list if col in var('ticket_field_history_columns') %}\n        {% set col_xf = col|lower %}\n        , min(case when lower(field_name) = '{{ col|lower }}' then value end) as {{ col_xf }}\n        {% endfor %}\n    \n    from filtered\n    where cast(valid_starting_at as date) < current_date\n    group by 1,2\n\n), surrogate_key as (\n\n    select \n        *,\n        {{ dbt_utils.surrogate_key(['ticket_id','date_day'])}} as ticket_day_id\n    from pivot\n\n)\n\nselect *\nfrom surrogate_key", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "ticket_history", "zendesk_field_history_pivot"], "unique_id": "model.zendesk.zendesk_field_history_pivot", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "ticket_history/zendesk_field_history_pivot.sql", "original_file_path": "models/ticket_history/zendesk_field_history_pivot.sql", "name": "zendesk_field_history_pivot", "resource_type": "model", "alias": "zendesk_field_history_pivot", "checksum": {"name": "sha256", "checksum": "b46a0e2dc29b3139f53c9caf2811981f6ecc9e7d1f48dc9fa141a49b9c47cf2d"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "partition_by": {"field": "date_day", "data_type": "date"}, "unique_key": "ticket_day_id"}, "tags": [], "refs": [["stg_zendesk_ticket_field_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.dateadd", "macro.dbt_utils.surrogate_key"], "nodes": ["model.zendesk_source.stg_zendesk_ticket_field_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.zendesk_field_history_scd": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        partition_by = {'field': 'valid_from', 'data_type': 'date'},\n        unique_key='ticket_day_id'\n        ) \n}}\n\n{%- set ticket_columns = adapter.get_columns_in_relation(ref('zendesk_field_history_pivot')) -%}\n    \nwith change_data as (\n\n    select *\n    from {{ ref('zendesk_field_history_pivot') }}\n    {% if is_incremental() %}\n    where date_day >= (select max(valid_from) from {{ this }})\n    {% endif %}\n\n), fill_values as (\n\n    select \n        date_day as valid_from, \n        ticket_id,\n        ticket_day_id\n        \n        {% for col in ticket_columns if col.name|lower not in ['date_day','ticket_id','ticket_day_id'] %} \n        \n        ,last_value({{ col.name }} ignore nulls) over \n          (partition by ticket_id order by date_day asc rows between unbounded preceding and current row) as {{ col.name }}\n\n        {% endfor %}\n\n    from change_data\n\n)\n\nselect *\nfrom fill_values", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "ticket_history", "zendesk_field_history_scd"], "unique_id": "model.zendesk.zendesk_field_history_scd", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "ticket_history/zendesk_field_history_scd.sql", "original_file_path": "models/ticket_history/zendesk_field_history_scd.sql", "name": "zendesk_field_history_scd", "resource_type": "model", "alias": "zendesk_field_history_scd", "checksum": {"name": "sha256", "checksum": "f5d34b6fd229e089fbdb5922dd90e83e0a9e0eee3c16e7256dec6a1ed7f38bfb"}, "config": {"enabled": true, "materialized": "incremental", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "partition_by": {"field": "valid_from", "data_type": "date"}, "unique_key": "ticket_day_id"}, "tags": [], "refs": [["zendesk_field_history_pivot"], ["zendesk_field_history_pivot"]], "sources": [], "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.zendesk.zendesk_field_history_pivot", "model.zendesk.zendesk_field_history_pivot"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.ticket_work_time_calendar": {"raw_sql": "with ticket_historical_status as (\n\n    select *\n    from {{ ref('ticket_historical_status') }}\n\n), calendar_minutes as (\n  \n    select \n      ticket_id,\n      status,\n      case when status in ('pending') then status_duration_calendar_minutes\n          else 0 end as agent_wait_time_in_minutes,\n      case when status in ('new', 'open', 'hold') then status_duration_calendar_minutes\n          else 0 end as requester_wait_time_in_minutes,\n      case when status in ('new', 'open') then status_duration_calendar_minutes\n          else 0 end as agent_work_time_in_minutes,\n      case when status in ('hold') then status_duration_calendar_minutes\n          else 0 end as on_hold_time_in_minutes\n    from ticket_historical_status\n\n)\n\nselect \n  ticket_id,\n  sum(agent_wait_time_in_minutes) as agent_wait_time_in_calendar_minutes,\n  sum(requester_wait_time_in_minutes) as requester_wait_time_in_calendar_minutes,\n  sum(agent_work_time_in_minutes) as agent_work_time_in_calendar_minutes,\n  sum(on_hold_time_in_minutes) as on_hold_time_in_calendar_minutes\nfrom calendar_minutes\ngroup by 1", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "agent_work_time", "ticket_work_time_calendar"], "unique_id": "model.zendesk.ticket_work_time_calendar", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "agent_work_time/ticket_work_time_calendar.sql", "original_file_path": "models/agent_work_time/ticket_work_time_calendar.sql", "name": "ticket_work_time_calendar", "resource_type": "model", "alias": "ticket_work_time_calendar", "checksum": {"name": "sha256", "checksum": "dfb1730c3892bd06c63fcc477e6b64ad82c4d19d0a60bfbaf16f50e657c573ad"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["ticket_historical_status"]], "sources": [], "depends_on": {"macros": [], "nodes": ["model.zendesk.ticket_historical_status"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.ticket_work_time_business": {"raw_sql": "{{ config(enabled=var('using_schedules', True)) }}\n\nwith ticket_historical_status as (\n\n    select *\n    from {{ ref('ticket_historical_status') }}\n\n), ticket_schedules as (\n\n    select *\n    from {{ ref('ticket_schedules') }}\n\n), schedule as (\n\n    select *\n    from {{ ref('stg_zendesk_schedule') }}\n\n), ticket_status_crossed_with_schedule as (\n  \n    select\n      ticket_historical_status.ticket_id,\n      ticket_historical_status.status as ticket_status,\n      ticket_schedules.schedule_id,\n      greatest(valid_starting_at, schedule_created_at) as status_schedule_start,\n      least(valid_ending_at, schedule_invalidated_at) as status_schedule_end\n    from ticket_historical_status\n    left join ticket_schedules\n      on ticket_historical_status.ticket_id = ticket_schedules.ticket_id\n      where {{ timestamp_diff('greatest(valid_starting_at, schedule_created_at)', 'least(valid_ending_at, schedule_invalidated_at)', 'second') }} > 0\n\n), ticket_full_solved_time as (\n\n    select \n      ticket_status_crossed_with_schedule.*,\n      round({{ timestamp_diff(\n              \"\" ~ dbt_utils.date_trunc('week', 'ticket_status_crossed_with_schedule.status_schedule_start') ~ \"\", \n              'ticket_status_crossed_with_schedule.status_schedule_start',\n              'second') }} /60,\n            0) as start_time_in_minutes_from_week,\n      round({{ timestamp_diff(\n              'ticket_status_crossed_with_schedule.status_schedule_start',\n              'ticket_status_crossed_with_schedule.status_schedule_end',\n              'second') }} /60,\n            0) as raw_delta_in_minutes\n    from ticket_status_crossed_with_schedule\n    group by 1, 2, 3, 4, 5\n\n), weeks as (\n\n    {{ dbt_utils.generate_series(208) }}\n\n), weeks_cross_ticket_full_solved_time as (\n    \n    select \n      ticket_full_solved_time.*,\n      generated_number - 1 as week_number\n    from ticket_full_solved_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number -1\n\n), weekly_periods as (\n\n    select\n\n      weeks_cross_ticket_full_solved_time.*,\n      greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n      least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n    \n    from weeks_cross_ticket_full_solved_time\n\n), intercepted_periods as (\n  \n    select \n      weekly_periods.ticket_id,\n      weekly_periods.week_number,\n      weekly_periods.schedule_id,\n      weekly_periods.ticket_status,\n      weekly_periods.ticket_week_start_time,\n      weekly_periods.ticket_week_end_time,\n      schedule.start_time_utc as schedule_start_time,\n      schedule.end_time_utc as schedule_end_time,\n      least(ticket_week_end_time, schedule.end_time_utc) - greatest(weekly_periods.ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n    from weekly_periods\n    join schedule on ticket_week_start_time <= schedule.end_time_utc \n      and ticket_week_end_time >= schedule.start_time_utc\n      and weekly_periods.schedule_id = schedule.schedule_id\n\n), business_minutes as (\n  \n    select \n      ticket_id,\n      ticket_status,\n      case when ticket_status in ('pending') then scheduled_minutes\n          else 0 end as agent_wait_time_in_minutes,\n      case when ticket_status in ('new', 'open', 'hold') then scheduled_minutes\n          else 0 end as requester_wait_time_in_minutes,\n      case when ticket_status in ('new', 'open') then scheduled_minutes\n          else 0 end as agent_work_time_in_minutes,\n      case when ticket_status in ('hold') then scheduled_minutes\n          else 0 end as on_hold_time_in_minutes\n    from intercepted_periods\n\n)\n  \n    select \n      ticket_id,\n      sum(agent_wait_time_in_minutes) as agent_wait_time_in_business_minutes,\n      sum(requester_wait_time_in_minutes) as requester_wait_time_in_business_minutes,\n      sum(agent_work_time_in_minutes) as agent_work_time_in_business_minutes,\n      sum(on_hold_time_in_minutes) as on_hold_time_in_business_minutes\n    from business_minutes\n    group by 1", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "agent_work_time", "ticket_work_time_business"], "unique_id": "model.zendesk.ticket_work_time_business", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "agent_work_time/ticket_work_time_business.sql", "original_file_path": "models/agent_work_time/ticket_work_time_business.sql", "name": "ticket_work_time_business", "resource_type": "model", "alias": "ticket_work_time_business", "checksum": {"name": "sha256", "checksum": "1b843a018a9740e40fbaecfad12db68612458fca4e187d3bb0a06fcc85988ad0"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["ticket_historical_status"], ["ticket_schedules"], ["stg_zendesk_schedule"]], "sources": [], "depends_on": {"macros": ["macro.zendesk.timestamp_diff", "macro.dbt_utils.date_trunc", "macro.dbt_utils.generate_series"], "nodes": ["model.zendesk.ticket_historical_status", "model.zendesk.ticket_schedules", "model.zendesk_source.stg_zendesk_schedule"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.zendesk_calendar_spine": {"raw_sql": "-- depends_on: {{ ref('stg_zendesk_ticket') }}\n\nwith spine as (\n\n    {% if execute %}\n    {% set first_date_query %}\n        select  min( created_at ) as min_date from {{ ref('stg_zendesk_ticket') }}\n    {% endset %}\n    {% set first_date = run_query(first_date_query).columns[0][0]|string %}\n    \n    {% else %} {% set first_date = \"'2016-01-01'\" %}\n    {% endif %}\n\n{{\n    dbt_utils.date_spine(\n        datepart = \"day\", \n        start_date =  \"'\" ~ first_date[0:10] ~ \"'\", \n        end_date = dbt_utils.dateadd(\"week\", 1, \"current_date\")\n    )   \n}}\n\n), recast as (\n\n    select cast(date_day as date) as date_day\n    from spine\n\n)\n\nselect *\nfrom recast", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "utils", "zendesk_calendar_spine"], "unique_id": "model.zendesk.zendesk_calendar_spine", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "utils/zendesk_calendar_spine.sql", "original_file_path": "models/utils/zendesk_calendar_spine.sql", "name": "zendesk_calendar_spine", "resource_type": "model", "alias": "zendesk_calendar_spine", "checksum": {"name": "sha256", "checksum": "144eb495d6341c27802a508600312b32a727ee30fd3662642223159cceac9b92"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_zendesk_ticket"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_spine"], "nodes": ["model.zendesk_source.stg_zendesk_ticket"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.ticket_full_resolution_time_business": {"raw_sql": "{{ config(enabled=var('using_schedules', True)) }}\n\nwith ticket_resolution_times_calendar as (\n\n    select *\n    from {{ ref('ticket_resolution_times_calendar') }}\n\n), ticket_schedules as (\n\n    select *\n    from {{ ref('ticket_schedules') }}\n\n), schedule as (\n\n    select *\n    from {{ ref('stg_zendesk_schedule') }}\n\n), ticket_full_resolution_time as (\n\n  select \n    ticket_resolution_times_calendar.ticket_id,\n    ticket_schedules.schedule_created_at,\n    ticket_schedules.schedule_invalidated_at,\n    ticket_schedules.schedule_id,\n    round({{ timestamp_diff(\n            \"\" ~ dbt_utils.date_trunc('week', 'ticket_schedules.schedule_created_at') ~ \"\", \n            'ticket_schedules.schedule_created_at',\n            'second') }} /60,\n          0) as start_time_in_minutes_from_week,\n    greatest(0,\n      round(\n        {{ timestamp_diff(\n          'ticket_schedules.schedule_created_at',\n          'least(ticket_schedules.schedule_invalidated_at, min(ticket_resolution_times_calendar.last_solved_at))',\n          'second') }}/60\n      , 0)) as raw_delta_in_minutes\n      \n  from ticket_resolution_times_calendar\n  join ticket_schedules on ticket_resolution_times_calendar.ticket_id = ticket_schedules.ticket_id\n  group by 1, 2, 3, 4\n\n), weeks as (\n\n    {{ dbt_utils.generate_series(208) }}\n\n), weeks_cross_ticket_full_resolution_time as (\n\n    select \n\n      ticket_full_resolution_time.*,\n      generated_number - 1 as week_number\n\n    from ticket_full_resolution_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number - 1\n\n), weekly_periods as (\n  \n  select \n\n    weeks_cross_ticket_full_resolution_time.*,\n    greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n    least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n  \n  from weeks_cross_ticket_full_resolution_time\n\n), intercepted_periods as (\n\n  select \n    ticket_id,\n    week_number,\n    weekly_periods.schedule_id,\n    ticket_week_start_time,\n    ticket_week_end_time,\n    schedule.start_time_utc as schedule_start_time,\n    schedule.end_time_utc as schedule_end_time,\n    least(ticket_week_end_time, schedule.end_time_utc) - greatest(ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n  from weekly_periods\n  join schedule on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n\n)\n\n  select \n    ticket_id,\n    sum(scheduled_minutes) as full_resolution_business_minutes\n  from intercepted_periods\n  group by 1", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "resolution_times", "ticket_full_resolution_time_business"], "unique_id": "model.zendesk.ticket_full_resolution_time_business", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "resolution_times/ticket_full_resolution_time_business.sql", "original_file_path": "models/resolution_times/ticket_full_resolution_time_business.sql", "name": "ticket_full_resolution_time_business", "resource_type": "model", "alias": "ticket_full_resolution_time_business", "checksum": {"name": "sha256", "checksum": "5ce0e52c7e5e6a4aaf8c60f95d5495e9991eb07cd49690126c5bdebd903357a9"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["ticket_resolution_times_calendar"], ["ticket_schedules"], ["stg_zendesk_schedule"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.zendesk.timestamp_diff", "macro.dbt_utils.generate_series"], "nodes": ["model.zendesk.ticket_resolution_times_calendar", "model.zendesk.ticket_schedules", "model.zendesk_source.stg_zendesk_schedule"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.ticket_first_resolution_time_business": {"raw_sql": "{{ config(enabled=var('using_schedules', True)) }}\n\nwith ticket_resolution_times_calendar as (\n\n    select *\n    from {{ ref('ticket_resolution_times_calendar') }}\n\n), ticket_schedules as (\n\n    select *\n    from {{ ref('ticket_schedules') }}\n\n), schedule as (\n\n    select *\n    from {{ ref('stg_zendesk_schedule') }}\n\n), ticket_first_resolution_time as (\n\n  select \n    ticket_resolution_times_calendar.ticket_id,\n    ticket_schedules.schedule_created_at,\n    ticket_schedules.schedule_invalidated_at,\n    ticket_schedules.schedule_id,\n    round({{ timestamp_diff(\n            \"\" ~ dbt_utils.date_trunc('week', 'ticket_schedules.schedule_created_at') ~ \"\", \n            'ticket_schedules.schedule_created_at',\n            'second') }} /60,\n          0) as start_time_in_minutes_from_week,\n    greatest(0,\n      round(\n        {{ timestamp_diff(\n          'ticket_schedules.schedule_created_at',\n          'least(ticket_schedules.schedule_invalidated_at, min(ticket_resolution_times_calendar.first_solved_at))',\n          'second') }}/60\n      , 0)) as raw_delta_in_minutes\n      \n  from ticket_resolution_times_calendar\n  join ticket_schedules on ticket_resolution_times_calendar.ticket_id = ticket_schedules.ticket_id\n  group by 1, 2, 3, 4\n\n), weeks as (\n\n    {{ dbt_utils.generate_series(208) }}\n\n), weeks_cross_ticket_first_resolution_time as (\n\n    select \n\n      ticket_first_resolution_time.*,\n      generated_number - 1 as week_number\n\n    from ticket_first_resolution_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number - 1\n\n\n), weekly_periods as (\n  \n    select \n\n      weeks_cross_ticket_first_resolution_time.*,\n      greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as ticket_week_start_time,\n      least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as ticket_week_end_time\n    \n    from weeks_cross_ticket_first_resolution_time\n\n), intercepted_periods as (\n\n  select ticket_id,\n         week_number,\n         weekly_periods.schedule_id,\n         ticket_week_start_time,\n         ticket_week_end_time,\n         schedule.start_time_utc as schedule_start_time,\n         schedule.end_time_utc as schedule_end_time,\n         least(ticket_week_end_time, schedule.end_time_utc) - greatest(ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n  from weekly_periods\n  join schedule on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n\n)\n\n  select \n    ticket_id,\n    sum(scheduled_minutes) as first_resolution_business_minutes\n  from intercepted_periods\n  group by 1", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "resolution_times", "ticket_first_resolution_time_business"], "unique_id": "model.zendesk.ticket_first_resolution_time_business", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "resolution_times/ticket_first_resolution_time_business.sql", "original_file_path": "models/resolution_times/ticket_first_resolution_time_business.sql", "name": "ticket_first_resolution_time_business", "resource_type": "model", "alias": "ticket_first_resolution_time_business", "checksum": {"name": "sha256", "checksum": "95111bfcabd04025d308d18509ed8cdf2150f33ff92d9430a2fdee05d87d65f0"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["ticket_resolution_times_calendar"], ["ticket_schedules"], ["stg_zendesk_schedule"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.zendesk.timestamp_diff", "macro.dbt_utils.generate_series"], "nodes": ["model.zendesk.ticket_resolution_times_calendar", "model.zendesk.ticket_schedules", "model.zendesk_source.stg_zendesk_schedule"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.ticket_resolution_times_calendar": {"raw_sql": "with historical_solved_status as (\n\n    select *\n    from {{ ref('ticket_historical_status') }}\n    where status = 'solved'\n\n), ticket as (\n\n    select *\n    from {{ ref('stg_zendesk_ticket') }}\n\n), solved_times as (\n  \n  select\n  \n    ticket_id,\n    min(valid_starting_at) as first_solved_at,\n    max(valid_starting_at) as last_solved_at\n\n  from historical_solved_status\n  group by 1\n\n)\n\n  select\n\n    ticket.ticket_id,\n    ticket.created_at,\n    solved_times.first_solved_at,\n    solved_times.last_solved_at,\n    {{ timestamp_diff(\n        'ticket.created_at', \n        'solved_times.first_solved_at',\n        'minute' ) }} as first_resolution_calendar_minutes,\n    {{ timestamp_diff(\n        'ticket.created_at', \n        'solved_times.last_solved_at',\n        'minute') }} as final_resolution_calendar_minutes\n\n  from ticket\n  left join solved_times\n    on solved_times.ticket_id = ticket.ticket_id", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "resolution_times", "ticket_resolution_times_calendar"], "unique_id": "model.zendesk.ticket_resolution_times_calendar", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "resolution_times/ticket_resolution_times_calendar.sql", "original_file_path": "models/resolution_times/ticket_resolution_times_calendar.sql", "name": "ticket_resolution_times_calendar", "resource_type": "model", "alias": "ticket_resolution_times_calendar", "checksum": {"name": "sha256", "checksum": "f374c7980d5472ad052888a748b5b72ca5507f5192ca7a8aa06ab75b4aa8063c"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["ticket_historical_status"], ["stg_zendesk_ticket"]], "sources": [], "depends_on": {"macros": ["macro.zendesk.timestamp_diff"], "nodes": ["model.zendesk.ticket_historical_status", "model.zendesk_source.stg_zendesk_ticket"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.ticket_historical_status": {"raw_sql": "-- To do -- can we delete ticket_status_counter and unique_status_counter?\n\nwith ticket_status_history as (\n\n    select *\n    from {{ ref('stg_zendesk_ticket_field_history') }}\n    where field_name = 'status'\n\n)\n\n  select\n  \n    ticket_id,\n    valid_starting_at,\n    valid_ending_at,\n    {{ timestamp_diff(\n        'valid_starting_at',\n        \"coalesce(valid_ending_at, \" ~ dbt_utils.current_timestamp() ~ \")\",\n        'minute') }} as status_duration_calendar_minutes,\n    value as status,\n    -- MIGHT BE ABLE TO DELETE ROWS BELOW\n    row_number() over (partition by ticket_id order by valid_starting_at) as ticket_status_counter,\n    row_number() over (partition by ticket_id, value order by valid_starting_at) as unique_status_counter\n\n  from ticket_status_history", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "intermediate", "ticket_historical_status"], "unique_id": "model.zendesk.ticket_historical_status", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "intermediate/ticket_historical_status.sql", "original_file_path": "models/intermediate/ticket_historical_status.sql", "name": "ticket_historical_status", "resource_type": "model", "alias": "ticket_historical_status", "checksum": {"name": "sha256", "checksum": "e63dcda1fe0efdee9fdf1a5b865d0aa1306a1ed7502d6cc68088653b81609785"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_zendesk_ticket_field_history"]], "sources": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.zendesk.timestamp_diff"], "nodes": ["model.zendesk_source.stg_zendesk_ticket_field_history"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.ticket_tags": {"raw_sql": "with ticket_tags as (\n\n    select *\n    from {{ ref('stg_zendesk_ticket_tag') }}\n  \n)\n\nselect\n  ticket_tags.ticket_id,\n  {{ string_agg( 'ticket_tags.tags', \"', '\" )}} as ticket_tags\nfrom ticket_tags\ngroup by 1", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "intermediate", "ticket_tags"], "unique_id": "model.zendesk.ticket_tags", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "intermediate/ticket_tags.sql", "original_file_path": "models/intermediate/ticket_tags.sql", "name": "ticket_tags", "resource_type": "model", "alias": "ticket_tags", "checksum": {"name": "sha256", "checksum": "b0f268ce437da45536ea7ebd94e584c25023179ab92bed9a5af9fc16df5e9559"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_zendesk_ticket_tag"]], "sources": [], "depends_on": {"macros": ["macro.zendesk.string_agg"], "nodes": ["model.zendesk_source.stg_zendesk_ticket_tag"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "model.zendesk.ticket_schedules": {"raw_sql": "{{ config(enabled=var('using_schedules', True)) }}\n\nwith ticket as (\n  \n  select *\n  from {{ ref('stg_zendesk_ticket') }}\n\n), ticket_schedule as (\n \n  select *\n  from {{ ref('stg_zendesk_ticket_schedule') }}\n\n), schedule as (\n \n  select *\n  from {{ ref('stg_zendesk_schedule') }}\n\n\n), default_schedule_events as (\n-- Goal: understand the working schedules applied to tickets, so that we can then determine the applicable business hours/schedule.\n-- Your default schedule is used for all tickets, unless you set up a trigger to apply a specific schedule to specific tickets.\n\n-- This portion of the query creates ticket_schedules for these \"default\" schedules, as the ticket_schedule table only includes\n-- trigger schedules\n\n{% if execute %}\n\n    {% set default_schedule_id_query %}\n        with set_default_schedule_flag as (\n          select \n            row_number() over (order by created_at) = 1 as is_default_schedule,\n            schedule_id\n          from {{ ref('stg_zendesk_schedule') }}\n        )\n        select \n          schedule_id\n        from set_default_schedule_flag\n        where is_default_schedule\n\n    {% endset %}\n\n    {% set default_schedule_id = run_query(default_schedule_id_query).columns[0][0]|string %}\n\n    {% endif %}\n\n  select\n    ticket.ticket_id,\n    ticket.created_at as schedule_created_at,\n    '{{default_schedule_id}}' as schedule_id\n  from ticket\n  left join ticket_schedule as first_schedule\n    on first_schedule.ticket_id = ticket.ticket_id\n    and {{ timestamp_add('second', -5, 'first_schedule.created_at') }} <= ticket.created_at\n    and first_schedule.created_at >= ticket.created_at    \n  where first_schedule.ticket_id is null\n\n), schedule_events as (\n  \n  select\n    *\n  from default_schedule_events\n  \n  union all\n  \n  select \n    ticket_id,\n    created_at as schedule_created_at,\n    schedule_id\n  from ticket_schedule\n\n), ticket_schedules as (\n  \n  select \n    ticket_id,\n    schedule_id,\n    schedule_created_at,\n    coalesce(lead(schedule_created_at) over (partition by ticket_id order by schedule_created_at)\n            , {{ timestamp_add(\"hour\", 1000, \"\" ~ dbt_utils.current_timestamp() ~ \"\") }} ) as schedule_invalidated_at\n  from schedule_events\n\n)\n\nselect *\nfrom ticket_schedules", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "intermediate", "ticket_schedules"], "unique_id": "model.zendesk.ticket_schedules", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "intermediate/ticket_schedules.sql", "original_file_path": "models/intermediate/ticket_schedules.sql", "name": "ticket_schedules", "resource_type": "model", "alias": "ticket_schedules", "checksum": {"name": "sha256", "checksum": "3e834c9988103df875be411e7c8e43d90e7ffabb71c9ae31b7e1d1ccda3b3a3f"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [["stg_zendesk_ticket"], ["stg_zendesk_ticket_schedule"], ["stg_zendesk_schedule"]], "sources": [], "depends_on": {"macros": ["macro.zendesk.timestamp_add", "macro.dbt_utils.current_timestamp"], "nodes": ["model.zendesk_source.stg_zendesk_ticket", "model.zendesk_source.stg_zendesk_ticket_schedule", "model.zendesk_source.stg_zendesk_schedule"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false}, "operation.zendesk.zendesk-on-run-start-0": {"raw_sql": "{{ ticket_field_history_columns_warning() }}", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "hooks", "zendesk-on-run-start-0"], "unique_id": "operation.zendesk.zendesk-on-run-start-0", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "hooks/zendesk-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "name": "zendesk-on-run-start-0", "resource_type": "operation", "alias": "zendesk-on-run-start-0", "checksum": {"name": "sha256", "checksum": "2a65083743f620ff664ca0be9d128587246f09716ba7834ee035324d5ced2062"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": ["on-run-start"], "refs": [], "sources": [], "depends_on": {"macros": ["macro.zendesk.ticket_field_history_columns_warning"], "nodes": []}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "index": 0}, "test.zendesk.unique_zendesk_ticket_enriched_ticket_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "ticket_id", "model": "{{ ref('zendesk_ticket_enriched') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "schema_test", "unique_zendesk_ticket_enriched_ticket_id"], "unique_id": "test.zendesk.unique_zendesk_ticket_enriched_ticket_id", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "schema_test/unique_zendesk_ticket_enriched_ticket_id.sql", "original_file_path": "models/zendesk.yml", "name": "unique_zendesk_ticket_enriched_ticket_id", "resource_type": "test", "alias": "unique_zendesk_ticket_enriched_ticket_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["zendesk_ticket_enriched"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.zendesk.zendesk_ticket_enriched"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "ticket_id"}, "test.zendesk.not_null_zendesk_ticket_enriched_ticket_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ticket_id", "model": "{{ ref('zendesk_ticket_enriched') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "schema_test", "not_null_zendesk_ticket_enriched_ticket_id"], "unique_id": "test.zendesk.not_null_zendesk_ticket_enriched_ticket_id", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "schema_test/not_null_zendesk_ticket_enriched_ticket_id.sql", "original_file_path": "models/zendesk.yml", "name": "not_null_zendesk_ticket_enriched_ticket_id", "resource_type": "test", "alias": "not_null_zendesk_ticket_enriched_ticket_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["zendesk_ticket_enriched"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.zendesk.zendesk_ticket_enriched"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "ticket_id"}, "test.zendesk.unique_zendesk_ticket_metrics_ticket_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "ticket_id", "model": "{{ ref('zendesk_ticket_metrics') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "schema_test", "unique_zendesk_ticket_metrics_ticket_id"], "unique_id": "test.zendesk.unique_zendesk_ticket_metrics_ticket_id", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "schema_test/unique_zendesk_ticket_metrics_ticket_id.sql", "original_file_path": "models/zendesk.yml", "name": "unique_zendesk_ticket_metrics_ticket_id", "resource_type": "test", "alias": "unique_zendesk_ticket_metrics_ticket_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["zendesk_ticket_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.zendesk.zendesk_ticket_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "ticket_id"}, "test.zendesk.not_null_zendesk_ticket_metrics_ticket_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ticket_id", "model": "{{ ref('zendesk_ticket_metrics') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk", "schema_test", "not_null_zendesk_ticket_metrics_ticket_id"], "unique_id": "test.zendesk.not_null_zendesk_ticket_metrics_ticket_id", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "schema_test/not_null_zendesk_ticket_metrics_ticket_id.sql", "original_file_path": "models/zendesk.yml", "name": "not_null_zendesk_ticket_metrics_ticket_id", "resource_type": "test", "alias": "not_null_zendesk_ticket_metrics_ticket_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["zendesk_ticket_metrics"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.zendesk.zendesk_ticket_metrics"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "ticket_id"}, "model.zendesk_source.stg_zendesk_user": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('user')}}\n\n), fields as (\n\n    select\n\n      id as user_id,\n      _fivetran_synced,\n      created_at,\n      email,\n      name,\n      organization_id,\n      role,\n      ticket_restriction,\n      time_zone,\n      active as is_active\n\n    from base\n\n)\n\nselect *\nfrom fields", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "stg_zendesk_user"], "unique_id": "model.zendesk_source.stg_zendesk_user", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "stg_zendesk_user.sql", "original_file_path": "models/stg_zendesk_user.sql", "name": "stg_zendesk_user", "resource_type": "model", "alias": "stg_zendesk_user", "checksum": {"name": "sha256", "checksum": "a27e1a9b26cd4972ac863e1fb41f14726082dd285726b9c2a5bf0592698d4498"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["zendesk", "user"]], "depends_on": {"macros": [], "nodes": ["source.zendesk_source.zendesk.user"]}, "description": "Zendesk has three types of users, end-users (your customers), agents, and administrators.", "columns": {"user_id": {"name": "user_id", "description": "Automatically assigned when the user is created", "meta": {}, "data_type": null, "tags": []}, "email": {"name": "email", "description": "The user's primary email address. *Writeable on create only. On update, a secondary email is added. See Email Address", "meta": {}, "data_type": null, "tags": []}, "name": {"name": "name", "description": "The user's name", "meta": {}, "data_type": null, "tags": []}, "is_active": {"name": "is_active", "description": "false if the user has been deleted", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "The time the user was created", "meta": {}, "data_type": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The id of the user's organization. If the user has more than one organization memberships, the id of the user's default organization", "meta": {}, "data_type": null, "tags": []}, "role": {"name": "role", "description": "The user's role. Possible values are \"end-user\", \"agent\", or \"admin\"", "meta": {}, "data_type": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "The user's time zone. See Time Zone", "meta": {}, "data_type": null, "tags": []}, "ticket_restriction": {"name": "ticket_restriction", "description": "Specifies which tickets the user has access to. Possible values are organization, groups, assigned, requested and null", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_zendesk.yml", "build_path": null, "deferred": false}, "model.zendesk_source.stg_zendesk_ticket_field_history": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('ticket_field_history')}}\n\n), fields as (\n    \n    select\n    \n      ticket_id,\n      field_name,\n      updated as valid_starting_at,\n      lead(updated) over (partition by ticket_id, field_name order by updated) as valid_ending_at,\n      value,\n      user_id\n\n    from base\n    order by 1,2,3\n\n)\n\nselect *\nfrom fields", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "stg_zendesk_ticket_field_history"], "unique_id": "model.zendesk_source.stg_zendesk_ticket_field_history", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "stg_zendesk_ticket_field_history.sql", "original_file_path": "models/stg_zendesk_ticket_field_history.sql", "name": "stg_zendesk_ticket_field_history", "resource_type": "model", "alias": "stg_zendesk_ticket_field_history", "checksum": {"name": "sha256", "checksum": "f97ced556ec4356b1302d978df35f513b9a36472419e34430571f921cdeaf641"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["zendesk", "ticket_field_history"]], "depends_on": {"macros": [], "nodes": ["source.zendesk_source.zendesk.ticket_field_history"]}, "description": "All fields and field values associated with tickets.", "columns": {"ticket_id": {"name": "ticket_id", "description": "The ID of the ticket associated with the field", "meta": {}, "data_type": null, "tags": []}, "field_name": {"name": "field_name", "description": "The name of the ticket field", "meta": {}, "data_type": null, "tags": []}, "valid_starting_at": {"name": "valid_starting_at", "description": "The time the ticket field value became valid", "meta": {}, "data_type": null, "tags": []}, "valid_ending_at": {"name": "valid_ending_at", "description": "The time the ticket field value became invalidated", "meta": {}, "data_type": null, "tags": []}, "value": {"name": "value", "description": "The value of the field", "meta": {}, "data_type": null, "tags": []}, "user_id": {"name": "user_id", "description": "The id of the user who made the update", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_zendesk.yml", "build_path": null, "deferred": false}, "model.zendesk_source.stg_zendesk_group": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('group')}}\n    \n), fields as (\n\n    select\n\n      id as group_id,\n      name\n\n    from base\n    where not _fivetran_deleted\n\n\n)\n\nselect *\nfrom fields", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "stg_zendesk_group"], "unique_id": "model.zendesk_source.stg_zendesk_group", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "stg_zendesk_group.sql", "original_file_path": "models/stg_zendesk_group.sql", "name": "stg_zendesk_group", "resource_type": "model", "alias": "stg_zendesk_group", "checksum": {"name": "sha256", "checksum": "b2c970c07ad34af9ebe67c7caf023b2a5b3f95c3f18ee098dbc64d274c49a6e8"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["zendesk", "group"]], "depends_on": {"macros": [], "nodes": ["source.zendesk_source.zendesk.group"]}, "description": "When support requests arrive in Zendesk Support, they can be assigned to a Group. Groups serve as the core element of ticket workflow; support agents are organized into Groups and tickets can be assigned to a Group only, or to an assigned agent within a Group. A ticket can never be assigned to an agent without also being  assigned to a Group.\n", "columns": {"group_id": {"name": "group_id", "description": "Automatically assigned when creating groups", "meta": {}, "data_type": null, "tags": []}, "name": {"name": "name", "description": "The name of the group", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_zendesk.yml", "build_path": null, "deferred": false}, "model.zendesk_source.stg_zendesk_organization": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('organization')}}\n\n), fields as (\n\n    select\n\n      id as organization_id,\n      details,\n      name\n\n    from base\n\n)\n\nselect *\nfrom fields", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "stg_zendesk_organization"], "unique_id": "model.zendesk_source.stg_zendesk_organization", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "stg_zendesk_organization.sql", "original_file_path": "models/stg_zendesk_organization.sql", "name": "stg_zendesk_organization", "resource_type": "model", "alias": "stg_zendesk_organization", "checksum": {"name": "sha256", "checksum": "4ce45874833cde9f9b184f5089936ad699eafe94845cf20eecc32d0dc051695c"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["zendesk", "organization"]], "depends_on": {"macros": [], "nodes": ["source.zendesk_source.zendesk.organization"]}, "description": "Just as agents can be segmented into groups in Zendesk Support, your customers (end-users) can be segmented into  organizations. You can manually assign customers to an organization or automatically assign them to an organization  by their email address domain. Organizations can be used in business rules to route tickets to groups of agents or  to send email notifications.\n", "columns": {"organization_id": {"name": "organization_id", "description": "Automatically assigned when the organization is created", "meta": {}, "data_type": null, "tags": []}, "name": {"name": "name", "description": "A unique name for the organization", "meta": {}, "data_type": null, "tags": []}, "details": {"name": "details", "description": "Any details obout the organization, such as the address", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_zendesk.yml", "build_path": null, "deferred": false}, "model.zendesk_source.stg_zendesk_ticket_schedule": {"raw_sql": "{{ config(enabled=var('using_schedules', True)) }}\n\nwith base as (\n\n    select *\n    from {{ var('ticket_schedule')}}\n\n), fields as (\n    \n    select\n\n      ticket_id,\n      created_at,\n      cast(schedule_id as {{ dbt_utils.type_string() }}) as schedule_id --need to convert from numeric to string for downstream models to work properly\n\n    from base\n\n)\n\nselect *\nfrom fields", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "stg_zendesk_ticket_schedule"], "unique_id": "model.zendesk_source.stg_zendesk_ticket_schedule", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "stg_zendesk_ticket_schedule.sql", "original_file_path": "models/stg_zendesk_ticket_schedule.sql", "name": "stg_zendesk_ticket_schedule", "resource_type": "model", "alias": "stg_zendesk_ticket_schedule", "checksum": {"name": "sha256", "checksum": "ea8a5b848e9669de6e66e28272e75ed6c4392b741670dc99008a3c08946b4ba8"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["zendesk", "ticket_schedule"]], "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["source.zendesk_source.zendesk.ticket_schedule"]}, "description": "The schedules applied to tickets through a trigger.", "columns": {"ticket_id": {"name": "ticket_id", "description": "The ID of the ticket assigned to the schedule", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "The time the schedule was assigned to the ticket", "meta": {}, "data_type": null, "tags": []}, "schedule_id": {"name": "schedule_id", "description": "The ID of the schedule applied to the ticket", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_zendesk.yml", "build_path": null, "deferred": false}, "model.zendesk_source.stg_zendesk_ticket_tag": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('ticket_tag')}}\n\n), fields as (\n    \n    select\n\n      ticket_id,\n      tag as tags\n      \n    from base\n\n)\n\nselect *\nfrom fields", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "stg_zendesk_ticket_tag"], "unique_id": "model.zendesk_source.stg_zendesk_ticket_tag", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "stg_zendesk_ticket_tag.sql", "original_file_path": "models/stg_zendesk_ticket_tag.sql", "name": "stg_zendesk_ticket_tag", "resource_type": "model", "alias": "stg_zendesk_ticket_tag", "checksum": {"name": "sha256", "checksum": "62d8ba75c11342fe46a595a6ca3080fa3548363506bdd9f7568a258d2829c7b1"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["zendesk", "ticket_tag"]], "depends_on": {"macros": [], "nodes": ["source.zendesk_source.zendesk.ticket_tag"]}, "description": "Tags are words, or combinations of words, you can use to add more context to tickets. The table lists all tags currently associated with a ticket.\n", "columns": {"ticket_id": {"name": "ticket_id", "description": "The ID of the ticket associated with the tag", "meta": {}, "data_type": null, "tags": []}, "tag": {"name": "tag", "description": "The tag, or word(s), associated with the ticket", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_zendesk.yml", "build_path": null, "deferred": false}, "model.zendesk_source.stg_zendesk_ticket_comment": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('ticket_comment')}}\n\n), fields as (\n\n    select\n\n      id as ticket_comment_id,\n      _fivetran_synced,\n      body,\n      created as created_at,\n      public as is_public,\n      ticket_id,\n      user_id,\n      facebook_comment as is_facebook_comment,\n      tweet as is_tweet,\n      voice_comment as is_voice_comment\n\n    from base\n\n)\n\nselect *\nfrom fields", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "stg_zendesk_ticket_comment"], "unique_id": "model.zendesk_source.stg_zendesk_ticket_comment", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "stg_zendesk_ticket_comment.sql", "original_file_path": "models/stg_zendesk_ticket_comment.sql", "name": "stg_zendesk_ticket_comment", "resource_type": "model", "alias": "stg_zendesk_ticket_comment", "checksum": {"name": "sha256", "checksum": "832279b47582dc35e48bf7b4964ec9b80f22c4e78ef42e9b13d471a744e0f15d"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["zendesk", "ticket_comment"]], "depends_on": {"macros": [], "nodes": ["source.zendesk_source.zendesk.ticket_comment"]}, "description": "Ticket comments represent the conversation between requesters, collaborators, and agents. Comments can be public or private.", "columns": {"ticket_comment_id": {"name": "ticket_comment_id", "description": "Automatically assigned when the comment is created", "meta": {}, "data_type": null, "tags": []}, "body": {"name": "body", "description": "The comment string", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "The time the comment was created", "meta": {}, "data_type": null, "tags": []}, "is_public": {"name": "is_public", "description": "Boolean field indicating if the comment is public (true), or if it is an internal note (false)", "meta": {}, "data_type": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ticket id associated with this comment", "meta": {}, "data_type": null, "tags": []}, "user_id": {"name": "user_id", "description": "The id of the comment author", "meta": {}, "data_type": null, "tags": []}, "is_facebook_comment": {"name": "is_facebook_comment", "description": "Boolean field indicating if the comment is a facebook comment", "meta": {}, "data_type": null, "tags": []}, "is_tweet": {"name": "is_tweet", "description": "Boolean field indicating if the comment is a twitter tweet", "meta": {}, "data_type": null, "tags": []}, "is_voice_comment": {"name": "is_voice_comment", "description": "Boolean field indicating if the comment is a voice comment", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_zendesk.yml", "build_path": null, "deferred": false}, "model.zendesk_source.stg_zendesk_ticket": {"raw_sql": "with base as (\n\n    select *\n    from {{ var('ticket')}}\n\n), fields as (\n\n    select\n\n      id as ticket_id,\n      _fivetran_synced,\n      assignee_id,\n      brand_id,\n      created_at,\n      description,\n      due_at,\n      group_id,\n      is_public,\n      organization_id,\n      priority,\n      recipient,\n      requester_id,\n      status,\n      subject,\n      submitter_id,\n      ticket_form_id,\n      type,\n      updated_at,\n      url,\n      via_channel as created_channel,\n      via_source_from_id as source_from_id,\n      via_source_from_title as source_from_title,\n      via_source_rel as source_rel,\n      via_source_to_address as source_to_address,\n      via_source_to_name as source_to_name\n\n    from base\n\n)\n\nselect *\nfrom fields", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "stg_zendesk_ticket"], "unique_id": "model.zendesk_source.stg_zendesk_ticket", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "stg_zendesk_ticket.sql", "original_file_path": "models/stg_zendesk_ticket.sql", "name": "stg_zendesk_ticket", "resource_type": "model", "alias": "stg_zendesk_ticket", "checksum": {"name": "sha256", "checksum": "2fa437a03291f8a369c3e8eda1bb3dc24c00f75f9083c07c839e4f2a9246078c"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["zendesk", "ticket"]], "depends_on": {"macros": [], "nodes": ["source.zendesk_source.zendesk.ticket"]}, "description": "Tickets are the means through which your end users (customers) communicate with agents in Zendesk Support. Tickets can  originate from a number of channels, including email, Help Center, chat, phone call, Twitter, Facebook, or the API.\n", "columns": {"ticket_id": {"name": "ticket_id", "description": "Automatically assigned when the ticket is created", "meta": {}, "data_type": null, "tags": []}, "url": {"name": "url", "description": "The API url of this ticket", "meta": {}, "data_type": null, "tags": []}, "assignee_id": {"name": "assignee_id", "description": "The agent currently assigned to the ticket", "meta": {}, "data_type": null, "tags": []}, "brand_id": {"name": "brand_id", "description": "Enterprise only. The id of the brand this ticket is associated with", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "When this record was created", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "The type of this ticket, possible values are problem, incident, question or task", "meta": {}, "data_type": null, "tags": []}, "subject": {"name": "subject", "description": "The value of the subject field for this ticket", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "Read-only first comment on the ticket", "meta": {}, "data_type": null, "tags": []}, "priority": {"name": "priority", "description": "The urgency with which the ticket should be addressed, possible values are urgent, high, normal and low", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "The state of the ticket, possible values are new, open, pending, hold, solved and closed", "meta": {}, "data_type": null, "tags": []}, "recipient": {"name": "recipient", "description": "The original recipient e-mail address of the ticket", "meta": {}, "data_type": null, "tags": []}, "requester_id": {"name": "requester_id", "description": "The user who requested this ticket", "meta": {}, "data_type": null, "tags": []}, "submitter_id": {"name": "submitter_id", "description": "The user who submitted the ticket. The submitter always becomes the author of the first comment on the ticket", "meta": {}, "data_type": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The organization of the requester", "meta": {}, "data_type": null, "tags": []}, "group_id": {"name": "group_id", "description": "The group this ticket is assigned to", "meta": {}, "data_type": null, "tags": []}, "due_at": {"name": "due_at", "description": "If this is a ticket of type \"task\" it has a due date. Due date format uses ISO 8601 format.", "meta": {}, "data_type": null, "tags": []}, "ticket_form_id": {"name": "ticket_form_id", "description": "Enterprise only. The id of the ticket form to render for the ticket", "meta": {}, "data_type": null, "tags": []}, "is_public": {"name": "is_public", "description": "Is true if any comments are public, false otherwise", "meta": {}, "data_type": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When this record last got updated", "meta": {}, "data_type": null, "tags": []}, "created_channel": {"name": "created_channel", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "source_from_id": {"name": "source_from_id", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "source_from_title": {"name": "source_from_title", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "source_rel": {"name": "source_rel", "description": "The rel the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "source_to_address": {"name": "source_to_address", "description": "The address of the source the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "source_to_name": {"name": "source_to_name", "description": "The name of the source the ticket was created from", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_zendesk.yml", "build_path": null, "deferred": false}, "model.zendesk_source.stg_zendesk_schedule": {"raw_sql": "{{ config(enabled=var('using_schedules', True)) }}\n\nwith base as (\n\n    select *\n    from {{ var('schedule')}}\n\n), fields as (\n    \n    select\n\n      cast(id as {{ dbt_utils.type_string() }}) as schedule_id, --need to convert from numeric to string for downstream models to work properly\n      end_time_utc,\n      start_time_utc,\n      name as schedule_name,\n      created_at\n      \n    from base\n    where not _fivetran_deleted\n\n)\n\nselect *\nfrom fields", "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "stg_zendesk_schedule"], "unique_id": "model.zendesk_source.stg_zendesk_schedule", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "stg_zendesk_schedule.sql", "original_file_path": "models/stg_zendesk_schedule.sql", "name": "stg_zendesk_schedule", "resource_type": "model", "alias": "stg_zendesk_schedule", "checksum": {"name": "sha256", "checksum": "43e508a0f2de62805883cfc033a06bc2b3fec3e8d98a5d71b77672eebe0e1cd0"}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null}, "tags": [], "refs": [], "sources": [["zendesk", "schedule"]], "depends_on": {"macros": ["macro.dbt_utils.type_string"], "nodes": ["source.zendesk_source.zendesk.schedule"]}, "description": "The support schedules created with different business hours and holidays.", "columns": {"schedule_id": {"name": "schedule_id", "description": "ID automatically assigned to the schedule upon creation", "meta": {}, "data_type": null, "tags": []}, "schedule_name": {"name": "schedule_name", "description": "Name of the schedule", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time the schedule was created", "meta": {}, "data_type": null, "tags": []}, "start_time_utc": {"name": "start_time_utc", "description": "Start time of the schedule, in UTC", "meta": {}, "data_type": null, "tags": []}, "end_time_utc": {"name": "end_time_utc", "description": "End time of the schedule, in UTC", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "models/stg_zendesk.yml", "build_path": null, "deferred": false}, "test.zendesk_source.unique_stg_zendesk_ticket_ticket_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "ticket_id", "model": "{{ ref('stg_zendesk_ticket') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "unique_stg_zendesk_ticket_ticket_id"], "unique_id": "test.zendesk_source.unique_stg_zendesk_ticket_ticket_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/unique_stg_zendesk_ticket_ticket_id.sql", "original_file_path": "models/stg_zendesk.yml", "name": "unique_stg_zendesk_ticket_ticket_id", "resource_type": "test", "alias": "unique_stg_zendesk_ticket_ticket_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_zendesk_ticket"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.zendesk_source.stg_zendesk_ticket"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "ticket_id"}, "test.zendesk_source.not_null_stg_zendesk_ticket_ticket_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ticket_id", "model": "{{ ref('stg_zendesk_ticket') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "not_null_stg_zendesk_ticket_ticket_id"], "unique_id": "test.zendesk_source.not_null_stg_zendesk_ticket_ticket_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/not_null_stg_zendesk_ticket_ticket_id.sql", "original_file_path": "models/stg_zendesk.yml", "name": "not_null_stg_zendesk_ticket_ticket_id", "resource_type": "test", "alias": "not_null_stg_zendesk_ticket_ticket_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_zendesk_ticket"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.zendesk_source.stg_zendesk_ticket"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "ticket_id"}, "test.zendesk_source.unique_stg_zendesk_group_group_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "group_id", "model": "{{ ref('stg_zendesk_group') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "unique_stg_zendesk_group_group_id"], "unique_id": "test.zendesk_source.unique_stg_zendesk_group_group_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/unique_stg_zendesk_group_group_id.sql", "original_file_path": "models/stg_zendesk.yml", "name": "unique_stg_zendesk_group_group_id", "resource_type": "test", "alias": "unique_stg_zendesk_group_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_zendesk_group"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.zendesk_source.stg_zendesk_group"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "group_id"}, "test.zendesk_source.not_null_stg_zendesk_group_group_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "group_id", "model": "{{ ref('stg_zendesk_group') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "not_null_stg_zendesk_group_group_id"], "unique_id": "test.zendesk_source.not_null_stg_zendesk_group_group_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/not_null_stg_zendesk_group_group_id.sql", "original_file_path": "models/stg_zendesk.yml", "name": "not_null_stg_zendesk_group_group_id", "resource_type": "test", "alias": "not_null_stg_zendesk_group_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_zendesk_group"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.zendesk_source.stg_zendesk_group"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "group_id"}, "test.zendesk_source.unique_stg_zendesk_organization_organization_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "organization_id", "model": "{{ ref('stg_zendesk_organization') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "unique_stg_zendesk_organization_organization_id"], "unique_id": "test.zendesk_source.unique_stg_zendesk_organization_organization_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/unique_stg_zendesk_organization_organization_id.sql", "original_file_path": "models/stg_zendesk.yml", "name": "unique_stg_zendesk_organization_organization_id", "resource_type": "test", "alias": "unique_stg_zendesk_organization_organization_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_zendesk_organization"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.zendesk_source.stg_zendesk_organization"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "organization_id"}, "test.zendesk_source.not_null_stg_zendesk_organization_organization_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "organization_id", "model": "{{ ref('stg_zendesk_organization') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "not_null_stg_zendesk_organization_organization_id"], "unique_id": "test.zendesk_source.not_null_stg_zendesk_organization_organization_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/not_null_stg_zendesk_organization_organization_id.sql", "original_file_path": "models/stg_zendesk.yml", "name": "not_null_stg_zendesk_organization_organization_id", "resource_type": "test", "alias": "not_null_stg_zendesk_organization_organization_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_zendesk_organization"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.zendesk_source.stg_zendesk_organization"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "organization_id"}, "test.zendesk_source.unique_stg_zendesk_ticket_comment_ticket_comment_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "ticket_comment_id", "model": "{{ ref('stg_zendesk_ticket_comment') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "unique_stg_zendesk_ticket_comment_ticket_comment_id"], "unique_id": "test.zendesk_source.unique_stg_zendesk_ticket_comment_ticket_comment_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/unique_stg_zendesk_ticket_comment_ticket_comment_id.sql", "original_file_path": "models/stg_zendesk.yml", "name": "unique_stg_zendesk_ticket_comment_ticket_comment_id", "resource_type": "test", "alias": "unique_stg_zendesk_ticket_comment_ticket_comment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_zendesk_ticket_comment"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.zendesk_source.stg_zendesk_ticket_comment"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "ticket_comment_id"}, "test.zendesk_source.not_null_stg_zendesk_ticket_comment_ticket_comment_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "ticket_comment_id", "model": "{{ ref('stg_zendesk_ticket_comment') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "not_null_stg_zendesk_ticket_comment_ticket_comment_id"], "unique_id": "test.zendesk_source.not_null_stg_zendesk_ticket_comment_ticket_comment_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/not_null_stg_zendesk_ticket_comment_ticket_comment_id.sql", "original_file_path": "models/stg_zendesk.yml", "name": "not_null_stg_zendesk_ticket_comment_ticket_comment_id", "resource_type": "test", "alias": "not_null_stg_zendesk_ticket_comment_ticket_comment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_zendesk_ticket_comment"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.zendesk_source.stg_zendesk_ticket_comment"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "ticket_comment_id"}, "test.zendesk_source.unique_stg_zendesk_user_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "user_id", "model": "{{ ref('stg_zendesk_user') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "unique_stg_zendesk_user_user_id"], "unique_id": "test.zendesk_source.unique_stg_zendesk_user_user_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/unique_stg_zendesk_user_user_id.sql", "original_file_path": "models/stg_zendesk.yml", "name": "unique_stg_zendesk_user_user_id", "resource_type": "test", "alias": "unique_stg_zendesk_user_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_zendesk_user"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.zendesk_source.stg_zendesk_user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "user_id"}, "test.zendesk_source.not_null_stg_zendesk_user_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "user_id", "model": "{{ ref('stg_zendesk_user') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "not_null_stg_zendesk_user_user_id"], "unique_id": "test.zendesk_source.not_null_stg_zendesk_user_user_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/not_null_stg_zendesk_user_user_id.sql", "original_file_path": "models/stg_zendesk.yml", "name": "not_null_stg_zendesk_user_user_id", "resource_type": "test", "alias": "not_null_stg_zendesk_user_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [["stg_zendesk_user"]], "sources": [], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.zendesk_source.stg_zendesk_user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "user_id"}, "test.zendesk_source.source_unique_zendesk_ticket_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('zendesk', 'ticket') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "source_unique_zendesk_ticket_id"], "unique_id": "test.zendesk_source.source_unique_zendesk_ticket_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/source_unique_zendesk_ticket_id.sql", "original_file_path": "models/src_zendesk.yml", "name": "source_unique_zendesk_ticket_id", "resource_type": "test", "alias": "source_unique_zendesk_ticket_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["zendesk", "ticket"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.zendesk_source.zendesk.ticket"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "id"}, "test.zendesk_source.source_not_null_zendesk_ticket_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('zendesk', 'ticket') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "source_not_null_zendesk_ticket_id"], "unique_id": "test.zendesk_source.source_not_null_zendesk_ticket_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/source_not_null_zendesk_ticket_id.sql", "original_file_path": "models/src_zendesk.yml", "name": "source_not_null_zendesk_ticket_id", "resource_type": "test", "alias": "source_not_null_zendesk_ticket_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["zendesk", "ticket"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.zendesk_source.zendesk.ticket"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "id"}, "test.zendesk_source.source_unique_zendesk_group_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('zendesk', 'group') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "source_unique_zendesk_group_id"], "unique_id": "test.zendesk_source.source_unique_zendesk_group_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/source_unique_zendesk_group_id.sql", "original_file_path": "models/src_zendesk.yml", "name": "source_unique_zendesk_group_id", "resource_type": "test", "alias": "source_unique_zendesk_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["zendesk", "group"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.zendesk_source.zendesk.group"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "id"}, "test.zendesk_source.source_not_null_zendesk_group_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('zendesk', 'group') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "source_not_null_zendesk_group_id"], "unique_id": "test.zendesk_source.source_not_null_zendesk_group_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/source_not_null_zendesk_group_id.sql", "original_file_path": "models/src_zendesk.yml", "name": "source_not_null_zendesk_group_id", "resource_type": "test", "alias": "source_not_null_zendesk_group_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["zendesk", "group"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.zendesk_source.zendesk.group"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "id"}, "test.zendesk_source.source_unique_zendesk_organization_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('zendesk', 'organization') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "source_unique_zendesk_organization_id"], "unique_id": "test.zendesk_source.source_unique_zendesk_organization_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/source_unique_zendesk_organization_id.sql", "original_file_path": "models/src_zendesk.yml", "name": "source_unique_zendesk_organization_id", "resource_type": "test", "alias": "source_unique_zendesk_organization_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["zendesk", "organization"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.zendesk_source.zendesk.organization"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "id"}, "test.zendesk_source.source_not_null_zendesk_organization_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('zendesk', 'organization') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "source_not_null_zendesk_organization_id"], "unique_id": "test.zendesk_source.source_not_null_zendesk_organization_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/source_not_null_zendesk_organization_id.sql", "original_file_path": "models/src_zendesk.yml", "name": "source_not_null_zendesk_organization_id", "resource_type": "test", "alias": "source_not_null_zendesk_organization_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["zendesk", "organization"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.zendesk_source.zendesk.organization"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "id"}, "test.zendesk_source.source_unique_zendesk_ticket_comment_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('zendesk', 'ticket_comment') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "source_unique_zendesk_ticket_comment_id"], "unique_id": "test.zendesk_source.source_unique_zendesk_ticket_comment_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/source_unique_zendesk_ticket_comment_id.sql", "original_file_path": "models/src_zendesk.yml", "name": "source_unique_zendesk_ticket_comment_id", "resource_type": "test", "alias": "source_unique_zendesk_ticket_comment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["zendesk", "ticket_comment"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.zendesk_source.zendesk.ticket_comment"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "id"}, "test.zendesk_source.source_not_null_zendesk_ticket_comment_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('zendesk', 'ticket_comment') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "source_not_null_zendesk_ticket_comment_id"], "unique_id": "test.zendesk_source.source_not_null_zendesk_ticket_comment_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/source_not_null_zendesk_ticket_comment_id.sql", "original_file_path": "models/src_zendesk.yml", "name": "source_not_null_zendesk_ticket_comment_id", "resource_type": "test", "alias": "source_not_null_zendesk_ticket_comment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["zendesk", "ticket_comment"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.zendesk_source.zendesk.ticket_comment"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "id"}, "test.zendesk_source.source_unique_zendesk_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "unique", "kwargs": {"column_name": "id", "model": "{{ source('zendesk', 'user') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "source_unique_zendesk_user_id"], "unique_id": "test.zendesk_source.source_unique_zendesk_user_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/source_unique_zendesk_user_id.sql", "original_file_path": "models/src_zendesk.yml", "name": "source_unique_zendesk_user_id", "resource_type": "test", "alias": "source_unique_zendesk_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["zendesk", "user"]], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["source.zendesk_source.zendesk.user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "id"}, "test.zendesk_source.source_not_null_zendesk_user_id": {"raw_sql": "{{ config(severity='ERROR') }}{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"namespace": null, "name": "not_null", "kwargs": {"column_name": "id", "model": "{{ source('zendesk', 'user') }}"}}, "database": "digital-arbor-400", "schema": "dbt_kristin_marketo", "fqn": ["zendesk_source", "schema_test", "source_not_null_zendesk_user_id"], "unique_id": "test.zendesk_source.source_not_null_zendesk_user_id", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "schema_test/source_not_null_zendesk_user_id.sql", "original_file_path": "models/src_zendesk.yml", "name": "source_not_null_zendesk_user_id", "resource_type": "test", "alias": "source_not_null_zendesk_user_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "post-hook": [], "pre-hook": [], "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "severity": "ERROR"}, "tags": ["schema"], "refs": [], "sources": [["zendesk", "user"]], "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["source.zendesk_source.zendesk.user"]}, "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "build_path": null, "deferred": false, "column_name": "id"}}, "sources": {"source.zendesk_source.zendesk.ticket": {"fqn": ["zendesk_source", "zendesk", "ticket"], "database": "digital-arbor-400", "schema": "zendesk", "unique_id": "source.zendesk_source.zendesk.ticket", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "name": "ticket", "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "ticket", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Tickets are the means through which your end users (customers) communicate with agents in Zendesk Support. Tickets can  originate from a number of channels, including email, Help Center, chat, phone call, Twitter, Facebook, or the API.\n", "columns": {"id": {"name": "id", "description": "Automatically assigned when the ticket is created", "meta": {}, "data_type": null, "tags": []}, "url": {"name": "url", "description": "The API url of this ticket", "meta": {}, "data_type": null, "tags": []}, "assignee_id": {"name": "assignee_id", "description": "The agent currently assigned to the ticket", "meta": {}, "data_type": null, "tags": []}, "brand_id": {"name": "brand_id", "description": "Enterprise only. The id of the brand this ticket is associated with", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "When this record was created", "meta": {}, "data_type": null, "tags": []}, "type": {"name": "type", "description": "The type of this ticket, possible values are problem, incident, question or task", "meta": {}, "data_type": null, "tags": []}, "subject": {"name": "subject", "description": "The value of the subject field for this ticket", "meta": {}, "data_type": null, "tags": []}, "description": {"name": "description", "description": "Read-only first comment on the ticket", "meta": {}, "data_type": null, "tags": []}, "priority": {"name": "priority", "description": "The urgency with which the ticket should be addressed, possible values are urgent, high, normal and low", "meta": {}, "data_type": null, "tags": []}, "status": {"name": "status", "description": "The state of the ticket, possible values are new, open, pending, hold, solved and closed", "meta": {}, "data_type": null, "tags": []}, "recipient": {"name": "recipient", "description": "The original recipient e-mail address of the ticket", "meta": {}, "data_type": null, "tags": []}, "requester_id": {"name": "requester_id", "description": "The user who requested this ticket", "meta": {}, "data_type": null, "tags": []}, "submitter_id": {"name": "submitter_id", "description": "The user who submitted the ticket. The submitter always becomes the author of the first comment on the ticket", "meta": {}, "data_type": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The organization of the requester", "meta": {}, "data_type": null, "tags": []}, "group_id": {"name": "group_id", "description": "The group this ticket is assigned to", "meta": {}, "data_type": null, "tags": []}, "due_at": {"name": "due_at", "description": "If this is a ticket of type \"task\" it has a due date. Due date format uses ISO 8601 format.", "meta": {}, "data_type": null, "tags": []}, "ticket_form_id": {"name": "ticket_form_id", "description": "Enterprise only. The id of the ticket form to render for the ticket", "meta": {}, "data_type": null, "tags": []}, "is_public": {"name": "is_public", "description": "Is true if any comments are public, false otherwise", "meta": {}, "data_type": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "When this record last got updated", "meta": {}, "data_type": null, "tags": []}, "via_channel": {"name": "via_channel", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "via_source_from_id": {"name": "via_source_from_id", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "via_source_from_title": {"name": "via_source_from_title", "description": "The channel the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "via_source_rel": {"name": "via_source_rel", "description": "The rel the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "via_source_to_address": {"name": "via_source_to_address", "description": "The address of the source the ticket was created from", "meta": {}, "data_type": null, "tags": []}, "via_source_to_name": {"name": "via_source_to_name", "description": "The name of the source the ticket was created from", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.zendesk_source.zendesk.group": {"fqn": ["zendesk_source", "zendesk", "group"], "database": "digital-arbor-400", "schema": "zendesk", "unique_id": "source.zendesk_source.zendesk.group", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "name": "group", "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "group", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "When support requests arrive in Zendesk Support, they can be assigned to a Group. Groups serve as the core element of ticket workflow; support agents are organized into Groups and tickets can be assigned to a Group only, or to an assigned agent within a Group. A ticket can never be assigned to an agent without also being  assigned to a Group.\n", "columns": {"id": {"name": "id", "description": "Automatically assigned when creating groups", "meta": {}, "data_type": null, "tags": []}, "name": {"name": "name", "description": "The name of the group", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.zendesk_source.zendesk.organization": {"fqn": ["zendesk_source", "zendesk", "organization"], "database": "digital-arbor-400", "schema": "zendesk", "unique_id": "source.zendesk_source.zendesk.organization", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "name": "organization", "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "organization", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Just as agents can be segmented into groups in Zendesk Support, your customers (end-users) can be segmented into  organizations. You can manually assign customers to an organization or automatically assign them to an organization  by their email address domain. Organizations can be used in business rules to route tickets to groups of agents or  to send email notifications.\n", "columns": {"id": {"name": "id", "description": "Automatically assigned when the organization is created", "meta": {}, "data_type": null, "tags": []}, "name": {"name": "name", "description": "A unique name for the organization", "meta": {}, "data_type": null, "tags": []}, "details": {"name": "details", "description": "Any details obout the organization, such as the address", "meta": {}, "data_type": null, "tags": []}, "url": {"name": "url", "description": "The API url of this organization", "meta": {}, "data_type": null, "tags": []}, "external_id": {"name": "external_id", "description": "A unique external id to associate organizations to an external record", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "The time the organization was created", "meta": {}, "data_type": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "The time of the last update of the organization", "meta": {}, "data_type": null, "tags": []}, "domain_names": {"name": "domain_names", "description": "An array of domain names associated with this organization", "meta": {}, "data_type": null, "tags": []}, "notes": {"name": "notes", "description": "Any notes you have about the organization", "meta": {}, "data_type": null, "tags": []}, "group_id": {"name": "group_id", "description": "New tickets from users in this organization are automatically put in this group", "meta": {}, "data_type": null, "tags": []}, "shared_tickets": {"name": "shared_tickets", "description": "End users in this organization are able to see each other's tickets", "meta": {}, "data_type": null, "tags": []}, "shared_comments": {"name": "shared_comments", "description": "End users in this organization are able to see each other's comments on tickets", "meta": {}, "data_type": null, "tags": []}, "tags": {"name": "tags", "description": "The tags of the organization", "meta": {}, "data_type": null, "tags": []}, "organization_fields": {"name": "organization_fields", "description": "Custom fields for this organization", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.zendesk_source.zendesk.ticket_comment": {"fqn": ["zendesk_source", "zendesk", "ticket_comment"], "database": "digital-arbor-400", "schema": "zendesk", "unique_id": "source.zendesk_source.zendesk.ticket_comment", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "name": "ticket_comment", "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "ticket_comment", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": 72, "period": "hour"}, "error_after": {"count": 168, "period": "hour"}, "filter": null}, "external": null, "description": "Ticket comments represent the conversation between requesters, collaborators, and agents. Comments can be public or private.", "columns": {"id": {"name": "id", "description": "Automatically assigned when the comment is created", "meta": {}, "data_type": null, "tags": []}, "body": {"name": "body", "description": "The comment string", "meta": {}, "data_type": null, "tags": []}, "created": {"name": "created", "description": "The time the comment was created", "meta": {}, "data_type": null, "tags": []}, "public": {"name": "public", "description": "Boolean field indicating if the comment is public (true), or if it is an internal note (false)", "meta": {}, "data_type": null, "tags": []}, "ticket_id": {"name": "ticket_id", "description": "The ticket id associated with this comment", "meta": {}, "data_type": null, "tags": []}, "user_id": {"name": "user_id", "description": "The id of the comment author", "meta": {}, "data_type": null, "tags": []}, "facebook_comment": {"name": "facebook_comment", "description": "Boolean field indicating if the comment is a facebook comment", "meta": {}, "data_type": null, "tags": []}, "tweet": {"name": "tweet", "description": "Boolean field indicating if the comment is a twitter tweet", "meta": {}, "data_type": null, "tags": []}, "voice_comment": {"name": "voice_comment", "description": "Boolean field indicating if the comment is a voice comment", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.zendesk_source.zendesk.user": {"fqn": ["zendesk_source", "zendesk", "user"], "database": "digital-arbor-400", "schema": "zendesk", "unique_id": "source.zendesk_source.zendesk.user", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "name": "user", "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "user", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Zendesk has three types of users, end-users (your customers), agents, and administrators.", "columns": {"id": {"name": "id", "description": "Automatically assigned when the user is created", "meta": {}, "data_type": null, "tags": []}, "email": {"name": "email", "description": "The user's primary email address. *Writeable on create only. On update, a secondary email is added. See Email Address", "meta": {}, "data_type": null, "tags": []}, "name": {"name": "name", "description": "The user's name", "meta": {}, "data_type": null, "tags": []}, "active": {"name": "active", "description": "false if the user has been deleted", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "The time the user was created", "meta": {}, "data_type": null, "tags": []}, "organization_id": {"name": "organization_id", "description": "The id of the user's organization. If the user has more than one organization memberships, the id of the user's default organization", "meta": {}, "data_type": null, "tags": []}, "role": {"name": "role", "description": "The user's role. Possible values are \"end-user\", \"agent\", or \"admin\"", "meta": {}, "data_type": null, "tags": []}, "time_zone": {"name": "time_zone", "description": "The user's time zone. See Time Zone", "meta": {}, "data_type": null, "tags": []}, "ticket_restriction": {"name": "ticket_restriction", "description": "Specifies which tickets the user has access to. Possible values are organization, groups, assigned, requested and null", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.zendesk_source.zendesk.schedule": {"fqn": ["zendesk_source", "zendesk", "schedule"], "database": "digital-arbor-400", "schema": "zendesk", "unique_id": "source.zendesk_source.zendesk.schedule", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "name": "schedule", "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "schedule", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "The support schedules created with different business hours and holidays.", "columns": {"id": {"name": "id", "description": "ID automatically assigned to the schedule upon creation", "meta": {}, "data_type": null, "tags": []}, "name": {"name": "name", "description": "Name of the schedule", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "Time the schedule was created", "meta": {}, "data_type": null, "tags": []}, "start_time_utc": {"name": "start_time_utc", "description": "Start time of the schedule, in UTC", "meta": {}, "data_type": null, "tags": []}, "end_time_utc": {"name": "end_time_utc", "description": "End time of the schedule, in UTC", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.zendesk_source.zendesk.ticket_schedule": {"fqn": ["zendesk_source", "zendesk", "ticket_schedule"], "database": "digital-arbor-400", "schema": "zendesk", "unique_id": "source.zendesk_source.zendesk.ticket_schedule", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "name": "ticket_schedule", "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "ticket_schedule", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "The schedules applied to tickets through a trigger.", "columns": {"ticket_id": {"name": "ticket_id", "description": "The ID of the ticket assigned to the schedule", "meta": {}, "data_type": null, "tags": []}, "created_at": {"name": "created_at", "description": "The time the schedule was assigned to the ticket", "meta": {}, "data_type": null, "tags": []}, "schedule_id": {"name": "schedule_id", "description": "The ID of the schedule applied to the ticket", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.zendesk_source.zendesk.ticket_tag": {"fqn": ["zendesk_source", "zendesk", "ticket_tag"], "database": "digital-arbor-400", "schema": "zendesk", "unique_id": "source.zendesk_source.zendesk.ticket_tag", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "name": "ticket_tag", "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "ticket_tag", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "Tags are words, or combinations of words, you can use to add more context to tickets. The table lists all tags currently associated with a ticket.\n", "columns": {"ticket_id": {"name": "ticket_id", "description": "The ID of the ticket associated with the tag", "meta": {}, "data_type": null, "tags": []}, "tag": {"name": "tag", "description": "The tag, or word(s), associated with the ticket", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}, "source.zendesk_source.zendesk.ticket_field_history": {"fqn": ["zendesk_source", "zendesk", "ticket_field_history"], "database": "digital-arbor-400", "schema": "zendesk", "unique_id": "source.zendesk_source.zendesk.ticket_field_history", "package_name": "zendesk_source", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/zendesk_source", "path": "models/src_zendesk.yml", "original_file_path": "models/src_zendesk.yml", "name": "ticket_field_history", "source_name": "zendesk", "source_description": "", "loader": "fivetran", "identifier": "ticket_field_history", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": null, "external": null, "description": "All fields and field values associated with tickets.", "columns": {"ticket_id": {"name": "ticket_id", "description": "The ID of the ticket associated with the field", "meta": {}, "data_type": null, "tags": []}, "field_name": {"name": "field_name", "description": "The name of the ticket field", "meta": {}, "data_type": null, "tags": []}, "updated": {"name": "updated", "description": "The time the ticket field value was created", "meta": {}, "data_type": null, "tags": []}, "value": {"name": "value", "description": "The value of the field", "meta": {}, "data_type": null, "tags": []}, "user_id": {"name": "user_id", "description": "The id of the user who made the update", "meta": {}, "data_type": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null}}, "macros": {"macro.zendesk.enabled_vars": {"unique_id": "macro.zendesk.enabled_vars", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "name": "enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk.string_agg": {"unique_id": "macro.zendesk.string_agg", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', packages = zendesk._get_utils_namespaces()) (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk.default__string_agg": {"unique_id": "macro.zendesk.default__string_agg", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk.snowflake__string_agg": {"unique_id": "macro.zendesk.snowflake__string_agg", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk.redshift__string_agg": {"unique_id": "macro.zendesk.redshift__string_agg", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "name": "redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk.timestamp_diff": {"unique_id": "macro.zendesk.timestamp_diff", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('datediff', packages = zendesk._get_utils_namespaces())(first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk.default__timestamp_diff": {"unique_id": "macro.zendesk.default__timestamp_diff", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk.bigquery__timestamp_diff": {"unique_id": "macro.zendesk.bigquery__timestamp_diff", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "name": "bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk.json_extract": {"unique_id": "macro.zendesk.json_extract", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', packages = zendesk._get_utils_namespaces()) (string, string_path) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk.default__json_extract": {"unique_id": "macro.zendesk.default__json_extract", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk.bigquery__json_extract": {"unique_id": "macro.zendesk.bigquery__json_extract", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "name": "bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk.timestamp_add": {"unique_id": "macro.zendesk.timestamp_add", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', packages = zendesk._get_utils_namespaces()) (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk.default__timestamp_add": {"unique_id": "macro.zendesk.default__timestamp_add", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk.bigquery__timestamp_add": {"unique_id": "macro.zendesk.bigquery__timestamp_add", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk.redshift__timestamp_add": {"unique_id": "macro.zendesk.redshift__timestamp_add", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "name": "redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk.ceiling": {"unique_id": "macro.zendesk.ceiling", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', packages = zendesk._get_utils_namespaces()) (num) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk.default__ceiling": {"unique_id": "macro.zendesk.default__ceiling", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk.snowflake__ceiling": {"unique_id": "macro.zendesk.snowflake__ceiling", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "name": "snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk._get_utils_namespaces": {"unique_id": "macro.zendesk._get_utils_namespaces", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/_get_utils_namespaces.sql", "original_file_path": "macros/_get_utils_namespaces.sql", "name": "_get_utils_namespaces", "macro_sql": "{% macro _get_utils_namespaces() %}\n  {% set override_namespaces = var('dbt_utils_dispatch_list', []) %}\n  {% do return(override_namespaces + ['dbt_utils']) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.zendesk.ticket_field_history_columns_warning": {"unique_id": "macro.zendesk.ticket_field_history_columns_warning", "package_name": "zendesk", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk", "path": "macros/ticket_field_history_columns_warning.sql", "original_file_path": "macros/ticket_field_history_columns_warning.sql", "name": "ticket_field_history_columns_warning", "macro_sql": "{% macro ticket_field_history_columns_warning() %}\n\n{% if not var('ticket_field_history_columns') %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the 'ticket_field_history_columns'.\n    As a result, you won't see the history of any columns in the 'zendesk_ticket_field_history' model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_table_options(config, model, temporary=false) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    {% set to_return = create_or_replace_view(run_outside_transaction_hooks=False) %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.make_date_partitioned_table": {"unique_id": "macro.dbt_bigquery.make_date_partitioned_table", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "make_date_partitioned_table", "macro_sql": "{% macro make_date_partitioned_table(model, relation, dates, should_create, verbose=False) %}\n\n  {% if should_create %}\n      {{ adapter.make_date_partitioned_table(relation) }}\n  {% endif %}\n\n  {% for date in dates %}\n    {% set date = (date | string) %}\n    {% if verbose %}\n        {% set table_start_time = modules.datetime.datetime.now().strftime(\"%H:%M:%S\") %}\n        {{ log(table_start_time ~ ' | -> Running for day ' ~ date, info=True) }}\n    {% endif %}\n\n    {% set fixed_sql = model['injected_sql'] | replace('[DBT__PARTITION_DATE]', date) %}\n    {% set _ = adapter.execute_model(model, 'table', fixed_sql, decorator=date) %}\n  {% endfor %}\n\n  {% set num_days = dates | length %}\n  {% if num_days == 1 %}\n      {% set result_str = 'CREATED 1 PARTITION' %}\n  {% else %}\n      {% set result_str = 'CREATED ' ~ num_days ~ ' PARTITIONS' %}\n  {% endif %}\n\n  {{ store_result('main', status=result_str) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n  {%- set verbose = config.get('verbose', False) -%}\n\n  {# partitions: iterate over each partition, running a separate query in a for-loop #}\n  {%- set partitions = config.get('partitions') -%}\n\n  {% if partitions %}\n      {% if partitions is number or partitions is string %}\n        {% set partitions = [(partitions | string)] %}\n      {% endif %}\n\n      {% if partitions is not iterable %}\n        {{ exceptions.raise_compiler_error(\"Provided `partitions` configuration is not a list. Got: \" ~ partitions, model) }}\n      {% endif %}\n  {% endif %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      Since dbt uses WRITE_TRUNCATE mode for tables, we only need to drop this thing\n      if it is not a table. If it _is_ already a table, then we can overwrite it without downtime\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% if partitions %}\n    {# Create the dp-table if 1. it does not exist or 2. it existed, but we just dropped it #}\n    {%- set should_create = (old_relation is none or exists_not_as_table) -%}\n    {{ make_date_partitioned_table(model, target_relation, partitions, should_create, verbose) }}\n  {% else %}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set cluster_by = config.get('cluster_by', none) -%}\n    {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n      {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n      {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    {% call statement('main') -%}\n      {{ create_table_as(False, target_relation, sql) }}\n    {% endcall -%}\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {# there should be exactly one ref or exactly one source #}\n  {% set destination = this.incorporate(type='table') %}\n\n  {% set dependency_type = none %}\n  {% if (model.refs | length) == 1 and (model.sources | length) == 0 %}\n    {% set dependency_type = 'ref' %}\n  {% elif (model.refs | length) == 0 and (model.sources | length) == 1 %}\n    {% set dependency_type = 'source' %}\n  {% else %}\n    {% set msg %}\n        Expected exactly one ref or exactly one source, instead got {{ model.refs | length }} models and {{ model.sources | length }} sources.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% if dependency_type == 'ref' %}\n    {% set src =  ref(*model.refs[0]) %}\n  {% else %}\n    {% set src =  source(*model.sources[0]) %}\n  {% endif %}\n\n  {%- set result_str = adapter.copy_table(\n      src,\n      destination,\n      config.get('copy_materialization', 'table')) -%}\n\n  {{ store_result('main', status=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns) %}\n  {%- set partition_type =\n      'date' if partition_by.data_type in ('timestamp, datetime')\n      else partition_by.data_type -%}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_type }}>;\n      declare _dbt_max_partition {{ partition_by.data_type }};\n\n      set _dbt_max_partition = (\n          select max({{ partition_by.field }}) from {{ this }}\n      );\n\n      -- 1. create a temp table\n      {{ create_table_as(True, tmp_relation, sql) }}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% else %}\n     {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n\n     {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n     {% if strategy == 'insert_overwrite' %}\n\n        {% set missing_partition_msg -%}\n          The 'insert_overwrite' strategy requires the `partition_by` config.\n        {%- endset %}\n        {% if partition_by is none %}\n          {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n        {% endif %}\n\n        {% set build_sql = bq_insert_overwrite(\n            tmp_relation,\n            target_relation,\n            sql,\n            unique_key,\n            partition_by,\n            partitions,\n            dest_columns) %}\n\n     {% else %}\n       {#-- wrap sql in parens to make it a subquery --#}\n       {%- set source_sql -%}\n         (\n           {{sql}}\n         )\n       {%- endset -%}\n\n       {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n     {% endif %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set status, res = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, status=status, agate_table=res) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, status=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_result(name, status=status, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'update'\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['injected_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = snapshot_string_as_time(now) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        ({{ snapshotted_rel }}.{{ col }} is null) != ({{ current_rel }}.{{ col }} is null)\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and snapshotted_data.dbt_valid_to is null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_valid_to is null\n        and (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    select * from insertions\n    union all\n    select * from updates\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['injected_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', status='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set status = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set num_rows = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', status ~ ' ' ~ num_rows) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column in dest_columns -%}\n            {{ adapter.quote(column.name) }} = DBT_INTERNAL_SOURCE.{{ adapter.quote(column.name) }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch(\"handle_existing_table\", packages=['dbt'])(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nselect count(*) as validation_errors\nfrom (\n    select {{ column_name }} as id from {{ model }}\n) as child\nleft join (\n    select {{ field }} as id from {{ to }}\n) as parent on parent.id = child.id\nwhere child.id is not null\n  and parent.id is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% macro test_relationships(model, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, to, field, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% macro test_not_null(model) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*) as validation_errors\nfrom (\n\n    select\n        {{ column_name }}\n\n    from {{ model }}\n    where {{ column_name }} is not null\n    group by {{ column_name }}\n    having count(*) > 1\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% macro test_unique(model) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, values) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n{% set quote_values = kwargs.get('quote', True) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field not in (\n        {% for value in values -%}\n            {% if quote_values -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n    )\n)\n\nselect count(*) as validation_errors\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% macro test_accepted_values(model, values) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, values, **kwargs) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ adapter_macro('dbt_utils.except') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ adapter_macro('dbt_utils.replace', field, old_chars, new_chars) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ adapter_macro('dbt_utils.concat', fields) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.alternative_concat": {"unique_id": "macro.dbt_utils.alternative_concat", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "alternative_concat", "macro_sql": "{% macro alternative_concat(fields) %}\n    {{ fields|join(' || ') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__concat": {"unique_id": "macro.dbt_utils.redshift__concat", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "redshift__concat", "macro_sql": "{% macro redshift__concat(fields) %}\n    {{dbt_utils.alternative_concat(fields)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__concat": {"unique_id": "macro.dbt_utils.snowflake__concat", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "snowflake__concat", "macro_sql": "{% macro snowflake__concat(fields) %}\n    {{dbt_utils.alternative_concat(fields)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifer.sql", "original_file_path": "macros/cross_db_utils/identifer.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\n  {{ adapter_macro('dbt_utils.identifier', value) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifer.sql", "original_file_path": "macros/cross_db_utils/identifer.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\n    \"{{ value }}\"\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifer.sql", "original_file_path": "macros/cross_db_utils/identifer.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\n    `{{ value }}`\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ adapter_macro('dbt_utils.type_string') }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ adapter_macro('dbt_utils.type_timestamp') }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ adapter_macro('dbt_utils.type_float') }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ adapter_macro('dbt_utils.type_numeric') }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ adapter_macro('dbt_utils.type_bigint') }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ adapter_macro('dbt_utils.type_int') }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ adapter_macro('dbt_utils.length', expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ adapter_macro('dbt_utils.dateadd', datepart, interval, from_date_or_timestamp) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ adapter_macro('dbt_utils.intersect') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ adapter_macro('dbt_utils.right', string_text, length_expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ adapter_macro('dbt_utils.datediff', first_date, second_date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ adapter_macro('dbt_utils.safe_cast', field, type) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ adapter_macro('dbt_utils.hash', field) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ adapter_macro('dbt_utils.position', substring_text, string_text) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ adapter_macro('dbt_utils.string_literal', value) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter_macro('dbt_utils.current_timestamp') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ adapter_macro('dbt_utils.current_timestamp_in_utc') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ adapter_macro('dbt_utils.width_bucket', expr, min_value, max_value, num_buckets) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ adapter_macro('dbt_utils.last_day', date, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    {{ exceptions.raise_compiler_error(\n        \"dbt_utils.last_day is not supported for datepart 'quarter' on this adapter\") }}\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ adapter_macro('dbt_utils.split_part', string_text, delimiter_text, part_number) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ adapter_macro('dbt_utils.date_trunc', datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}};\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {%- set rows_inserted = (load_result('main-' ~ i)['status'].split(\" \"))[2] | int -%}\n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement(name='main', status=status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/logger/pretty_log_format.sql", "original_file_path": "macros/logger/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/logger/pretty_time.sql", "original_file_path": "macros/logger/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/logger/log_info.sql", "original_file_path": "macros/logger/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/datetime/date_spine.sql", "original_file_path": "macros/datetime/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n\n{%- set parsed = \n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(field, \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n    \n-%}\n\n     \n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n        \n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/geo/haversine_distance.sql", "original_file_path": "macros/geo/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1,lon1,lat2,lon2) -%}\n\n    2 * 3961 * asin(sqrt((sin(radians(({{lat2}} - {{lat1}}) / 2))) ^ 2 +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    (sin(radians(({{lon2}} - {{lon1}}) / 2))) ^ 2))\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% macro test_equal_rowcount(model) %}\n\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select abs(\n            (select count_a from a) -\n            (select count_b from b)\n            )\n        as diff_count\n\n)\n\nselect diff_count from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% macro test_relationships_where(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n{% set from_condition = kwargs.get('from_condition', \"true\") %}\n{% set to_condition = kwargs.get('to_condition', \"true\") %}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect count(*) from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% macro test_recency(model, datepart, interval) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('field')) %}\n\nselect\n    case when count(*) > 0 then 0\n    else 1\n    end as error_result\nfrom {{model}}\nwhere {{column_name}} >=\n    {{dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp())}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% macro test_not_constant(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\n\nfrom (\n\n    select\n          count(distinct {{ column_name }})\n\n    from {{ model }}\n\n    having count(distinct {{ column_name }}) = 1\n\n    ) validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% macro test_at_least_one(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n\nselect count(*)\nfrom (\n    select\n\n      count({{ column_name }})\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% macro test_unique_combination_of_columns(model) %}\n\n{%- set columns = kwargs.get('combination_of_columns', kwargs.get('arg')) %}\n\n{%- set columns_csv=columns | join(', ') %}\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect count(*)\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% macro test_cardinality_equality(model, to, field) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('from')) %}\n\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by 1\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by 1\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect count(*)\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% macro test_expression_is_true(model, condition='true') %}\n\n{% set expression = kwargs.get('expression', kwargs.get('arg')) %}\n\nwith meet_condition as (\n\n    select * from {{ model }} where {{ condition }}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from meet_condition\n    where not({{expression}})\n\n)\n\nselect count(*)\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% macro test_equality(model) %}\n\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n{% set compare_model = kwargs.get('compare_model', kwargs.get('arg')) %}\n{% set compare_columns = kwargs.get('compare_columns', adapter.get_columns_in_relation(model) | map(attribute='quoted') ) %}\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select * from a_minus_b\n    union all\n    select * from b_minus_a\n\n),\n\nfinal as (\n\n    select (select count(*) from unioned) +\n        (select abs(\n            (select count(*) from a_minus_b) -\n            (select count(*) from b_minus_a)\n            ))\n        as count\n\n)\n\nselect count from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% macro test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed') %}\n\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }},\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound < upper_bound,\n            false\n        ) as lower_bound_less_than_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_less_than_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect count(*) from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * pow(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(database, row.table_schema, row.table_name) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_tables_by_prefix": {"unique_id": "macro.dbt_utils.get_tables_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_tables_by_prefix", "macro_sql": "{% macro get_tables_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {% do exceptions.warn(\"Warning: the `get_tables_by_prefix` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `get_relations_by_prefix` macro instead\") %}\n\n    {{ return(dbt_utils.get_relations_by_prefix(schema, prefix, exclude, database)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ adapter_macro('dbt_utils.get_tables_by_prefix_sql', schema, prefix, exclude, database) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n        select distinct \n            table_schema as \"table_schema\", table_name as \"table_name\"\n        from {{database}}.information_schema.tables\n        where table_schema ilike '{{ schema }}'\n        and table_name ilike '{{ prefix }}%'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.bigquery__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "bigquery__get_tables_by_prefix_sql", "macro_sql": "{% macro bigquery__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    \n        select distinct\n            dataset_id as table_schema, table_id as table_name\n\n        from {{adapter.quote(database)}}.{{schema}}.__TABLES_SUMMARY__\n        where dataset_id = '{{schema}}'\n            and lower(table_id) like lower ('{{prefix}}%')\n            and lower(table_id) not like lower ('{{exclude}}')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[]) -%}\n\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- for col in cols -%}\n\n        {%- if col.column not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ dbt_utils.identifier(col)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {% do exceptions.warn(\"Warning: the `unpivot` macro no longer accepts a `table` parameter. This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead\") %}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast({{ col.column }} as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.union_tables": {"unique_id": "macro.dbt_utils.union_tables", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n\n\n{%- if varargs|length >= 1 %}\n\n{%- do exceptions.warn(\"Warning: the `surrogate_key` macro now takes a single list argument instead of multiple string arguments. Support for multiple string arguments will be deprecated in a future release of dbt-utils.\") -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, max_records=none, default=none) -%}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n{#--  #}\n\n    {%- set target_relation = adapter.get_relation(database=table.database,\n                                          schema=table.schema,\n                                         identifier=table.identifier) -%}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not target_relation and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ table ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not target_relation and default is not none -%}\n\n          {{ log(\"Relation \" ~ table ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by 1\n            order by count(*) desc\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True) %}\n  {% for v in values %}\n    {{ agg }}(\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{prefix ~ v ~ suffix }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/kristin/Documents/Github/dbt_zendesk/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": []}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "disabled": [], "generated_at": "2020-09-14T22:47:51.953196Z", "parent_map": {"model.zendesk.zendesk_ticket_field_history": ["model.zendesk.zendesk_field_calendar_spine", "model.zendesk.zendesk_field_history_scd", "model.zendesk.zendesk_field_history_scd"], "model.zendesk.zendesk_ticket_metrics": ["model.zendesk.ticket_first_reply_time_business", "model.zendesk.ticket_first_resolution_time_business", "model.zendesk.ticket_full_resolution_time_business", "model.zendesk.ticket_one_touch_resolution", "model.zendesk.ticket_reply_times_calendar", "model.zendesk.ticket_resolution_times_calendar", "model.zendesk.ticket_work_time_business", "model.zendesk.ticket_work_time_calendar", "model.zendesk.zendesk_ticket_enriched"], "model.zendesk.zendesk_sla_breach": ["model.zendesk.agent_work_time_business_hours_breached", "model.zendesk.agent_work_time_calendar_hours_breached", "model.zendesk.reply_time_breach_combined"], "model.zendesk.zendesk_ticket_enriched": ["model.zendesk.ticket_tags", "model.zendesk_source.stg_zendesk_group", "model.zendesk_source.stg_zendesk_organization", "model.zendesk_source.stg_zendesk_ticket", "model.zendesk_source.stg_zendesk_user"], "model.zendesk.sla_policy_applied": ["model.zendesk_source.stg_zendesk_ticket", "model.zendesk_source.stg_zendesk_ticket_field_history"], "model.zendesk.reply_time_breach_combined": ["model.zendesk.reply_time_business_hours_breached", "model.zendesk.reply_time_calendar_hours_breached", "model.zendesk_source.stg_zendesk_ticket_comment", "model.zendesk_source.stg_zendesk_ticket_field_history", "model.zendesk_source.stg_zendesk_user"], "model.zendesk.reply_time_calendar_hours_breached": ["model.zendesk.sla_policy_applied"], "model.zendesk.reply_time_business_hours_breached": ["model.zendesk.sla_policy_applied", "model.zendesk.ticket_schedules", "model.zendesk_source.stg_zendesk_schedule"], "model.zendesk.agent_work_time_filtered_statuses": ["model.zendesk.sla_policy_applied", "model.zendesk.ticket_historical_status"], "model.zendesk.agent_work_time_calendar_hours_breached": ["model.zendesk.agent_work_time_filtered_statuses"], "model.zendesk.agent_work_time_business_hours_breached": ["model.zendesk.agent_work_time_filtered_statuses", "model.zendesk.ticket_schedules", "model.zendesk_source.stg_zendesk_schedule"], "model.zendesk.ticket_one_touch_resolution": ["model.zendesk.public_comments"], "model.zendesk.public_comments": ["model.zendesk_source.stg_zendesk_ticket_comment", "model.zendesk_source.stg_zendesk_user"], "model.zendesk.ticket_reply_times": ["model.zendesk.public_comments"], "model.zendesk.ticket_first_reply_time_business": ["model.zendesk.ticket_reply_times", "model.zendesk.ticket_schedules", "model.zendesk_source.stg_zendesk_schedule"], "model.zendesk.ticket_reply_times_calendar": ["model.zendesk.ticket_reply_times", "model.zendesk_source.stg_zendesk_ticket"], "model.zendesk.zendesk_field_calendar_spine": ["model.zendesk.zendesk_calendar_spine", "model.zendesk_source.stg_zendesk_ticket"], "model.zendesk.zendesk_field_history_pivot": ["model.zendesk_source.stg_zendesk_ticket_field_history"], "model.zendesk.zendesk_field_history_scd": ["model.zendesk.zendesk_field_history_pivot", "model.zendesk.zendesk_field_history_pivot"], "model.zendesk.ticket_work_time_calendar": ["model.zendesk.ticket_historical_status"], "model.zendesk.ticket_work_time_business": ["model.zendesk.ticket_historical_status", "model.zendesk.ticket_schedules", "model.zendesk_source.stg_zendesk_schedule"], "model.zendesk.zendesk_calendar_spine": ["model.zendesk_source.stg_zendesk_ticket"], "model.zendesk.ticket_full_resolution_time_business": ["model.zendesk.ticket_resolution_times_calendar", "model.zendesk.ticket_schedules", "model.zendesk_source.stg_zendesk_schedule"], "model.zendesk.ticket_first_resolution_time_business": ["model.zendesk.ticket_resolution_times_calendar", "model.zendesk.ticket_schedules", "model.zendesk_source.stg_zendesk_schedule"], "model.zendesk.ticket_resolution_times_calendar": ["model.zendesk.ticket_historical_status", "model.zendesk_source.stg_zendesk_ticket"], "model.zendesk.ticket_historical_status": ["model.zendesk_source.stg_zendesk_ticket_field_history"], "model.zendesk.ticket_tags": ["model.zendesk_source.stg_zendesk_ticket_tag"], "model.zendesk.ticket_schedules": ["model.zendesk_source.stg_zendesk_schedule", "model.zendesk_source.stg_zendesk_ticket", "model.zendesk_source.stg_zendesk_ticket_schedule"], "operation.zendesk.zendesk-on-run-start-0": [], "test.zendesk.unique_zendesk_ticket_enriched_ticket_id": ["model.zendesk.zendesk_ticket_enriched"], "test.zendesk.not_null_zendesk_ticket_enriched_ticket_id": ["model.zendesk.zendesk_ticket_enriched"], "test.zendesk.unique_zendesk_ticket_metrics_ticket_id": ["model.zendesk.zendesk_ticket_metrics"], "test.zendesk.not_null_zendesk_ticket_metrics_ticket_id": ["model.zendesk.zendesk_ticket_metrics"], "model.zendesk_source.stg_zendesk_user": ["source.zendesk_source.zendesk.user"], "model.zendesk_source.stg_zendesk_ticket_field_history": ["source.zendesk_source.zendesk.ticket_field_history"], "model.zendesk_source.stg_zendesk_group": ["source.zendesk_source.zendesk.group"], "model.zendesk_source.stg_zendesk_organization": ["source.zendesk_source.zendesk.organization"], "model.zendesk_source.stg_zendesk_ticket_schedule": ["source.zendesk_source.zendesk.ticket_schedule"], "model.zendesk_source.stg_zendesk_ticket_tag": ["source.zendesk_source.zendesk.ticket_tag"], "model.zendesk_source.stg_zendesk_ticket_comment": ["source.zendesk_source.zendesk.ticket_comment"], "model.zendesk_source.stg_zendesk_ticket": ["source.zendesk_source.zendesk.ticket"], "model.zendesk_source.stg_zendesk_schedule": ["source.zendesk_source.zendesk.schedule"], "test.zendesk_source.unique_stg_zendesk_ticket_ticket_id": ["model.zendesk_source.stg_zendesk_ticket"], "test.zendesk_source.not_null_stg_zendesk_ticket_ticket_id": ["model.zendesk_source.stg_zendesk_ticket"], "test.zendesk_source.unique_stg_zendesk_group_group_id": ["model.zendesk_source.stg_zendesk_group"], "test.zendesk_source.not_null_stg_zendesk_group_group_id": ["model.zendesk_source.stg_zendesk_group"], "test.zendesk_source.unique_stg_zendesk_organization_organization_id": ["model.zendesk_source.stg_zendesk_organization"], "test.zendesk_source.not_null_stg_zendesk_organization_organization_id": ["model.zendesk_source.stg_zendesk_organization"], "test.zendesk_source.unique_stg_zendesk_ticket_comment_ticket_comment_id": ["model.zendesk_source.stg_zendesk_ticket_comment"], "test.zendesk_source.not_null_stg_zendesk_ticket_comment_ticket_comment_id": ["model.zendesk_source.stg_zendesk_ticket_comment"], "test.zendesk_source.unique_stg_zendesk_user_user_id": ["model.zendesk_source.stg_zendesk_user"], "test.zendesk_source.not_null_stg_zendesk_user_user_id": ["model.zendesk_source.stg_zendesk_user"], "test.zendesk_source.source_unique_zendesk_ticket_id": ["source.zendesk_source.zendesk.ticket"], "test.zendesk_source.source_not_null_zendesk_ticket_id": ["source.zendesk_source.zendesk.ticket"], "test.zendesk_source.source_unique_zendesk_group_id": ["source.zendesk_source.zendesk.group"], "test.zendesk_source.source_not_null_zendesk_group_id": ["source.zendesk_source.zendesk.group"], "test.zendesk_source.source_unique_zendesk_organization_id": ["source.zendesk_source.zendesk.organization"], "test.zendesk_source.source_not_null_zendesk_organization_id": ["source.zendesk_source.zendesk.organization"], "test.zendesk_source.source_unique_zendesk_ticket_comment_id": ["source.zendesk_source.zendesk.ticket_comment"], "test.zendesk_source.source_not_null_zendesk_ticket_comment_id": ["source.zendesk_source.zendesk.ticket_comment"], "test.zendesk_source.source_unique_zendesk_user_id": ["source.zendesk_source.zendesk.user"], "test.zendesk_source.source_not_null_zendesk_user_id": ["source.zendesk_source.zendesk.user"], "source.zendesk_source.zendesk.ticket": [], "source.zendesk_source.zendesk.group": [], "source.zendesk_source.zendesk.organization": [], "source.zendesk_source.zendesk.ticket_comment": [], "source.zendesk_source.zendesk.user": [], "source.zendesk_source.zendesk.schedule": [], "source.zendesk_source.zendesk.ticket_schedule": [], "source.zendesk_source.zendesk.ticket_tag": [], "source.zendesk_source.zendesk.ticket_field_history": []}, "child_map": {"model.zendesk.zendesk_ticket_field_history": [], "model.zendesk.zendesk_ticket_metrics": ["test.zendesk.not_null_zendesk_ticket_metrics_ticket_id", "test.zendesk.unique_zendesk_ticket_metrics_ticket_id"], "model.zendesk.zendesk_sla_breach": [], "model.zendesk.zendesk_ticket_enriched": ["model.zendesk.zendesk_ticket_metrics", "test.zendesk.not_null_zendesk_ticket_enriched_ticket_id", "test.zendesk.unique_zendesk_ticket_enriched_ticket_id"], "model.zendesk.sla_policy_applied": ["model.zendesk.agent_work_time_filtered_statuses", "model.zendesk.reply_time_business_hours_breached", "model.zendesk.reply_time_calendar_hours_breached"], "model.zendesk.reply_time_breach_combined": ["model.zendesk.zendesk_sla_breach"], "model.zendesk.reply_time_calendar_hours_breached": ["model.zendesk.reply_time_breach_combined"], "model.zendesk.reply_time_business_hours_breached": ["model.zendesk.reply_time_breach_combined"], "model.zendesk.agent_work_time_filtered_statuses": ["model.zendesk.agent_work_time_business_hours_breached", "model.zendesk.agent_work_time_calendar_hours_breached"], "model.zendesk.agent_work_time_calendar_hours_breached": ["model.zendesk.zendesk_sla_breach"], "model.zendesk.agent_work_time_business_hours_breached": ["model.zendesk.zendesk_sla_breach"], "model.zendesk.ticket_one_touch_resolution": ["model.zendesk.zendesk_ticket_metrics"], "model.zendesk.public_comments": ["model.zendesk.ticket_one_touch_resolution", "model.zendesk.ticket_reply_times"], "model.zendesk.ticket_reply_times": ["model.zendesk.ticket_first_reply_time_business", "model.zendesk.ticket_reply_times_calendar"], "model.zendesk.ticket_first_reply_time_business": ["model.zendesk.zendesk_ticket_metrics"], "model.zendesk.ticket_reply_times_calendar": ["model.zendesk.zendesk_ticket_metrics"], "model.zendesk.zendesk_field_calendar_spine": ["model.zendesk.zendesk_ticket_field_history"], "model.zendesk.zendesk_field_history_pivot": ["model.zendesk.zendesk_field_history_scd", "model.zendesk.zendesk_field_history_scd"], "model.zendesk.zendesk_field_history_scd": ["model.zendesk.zendesk_ticket_field_history", "model.zendesk.zendesk_ticket_field_history"], "model.zendesk.ticket_work_time_calendar": ["model.zendesk.zendesk_ticket_metrics"], "model.zendesk.ticket_work_time_business": ["model.zendesk.zendesk_ticket_metrics"], "model.zendesk.zendesk_calendar_spine": ["model.zendesk.zendesk_field_calendar_spine"], "model.zendesk.ticket_full_resolution_time_business": ["model.zendesk.zendesk_ticket_metrics"], "model.zendesk.ticket_first_resolution_time_business": ["model.zendesk.zendesk_ticket_metrics"], "model.zendesk.ticket_resolution_times_calendar": ["model.zendesk.ticket_first_resolution_time_business", "model.zendesk.ticket_full_resolution_time_business", "model.zendesk.zendesk_ticket_metrics"], "model.zendesk.ticket_historical_status": ["model.zendesk.agent_work_time_filtered_statuses", "model.zendesk.ticket_resolution_times_calendar", "model.zendesk.ticket_work_time_business", "model.zendesk.ticket_work_time_calendar"], "model.zendesk.ticket_tags": ["model.zendesk.zendesk_ticket_enriched"], "model.zendesk.ticket_schedules": ["model.zendesk.agent_work_time_business_hours_breached", "model.zendesk.reply_time_business_hours_breached", "model.zendesk.ticket_first_reply_time_business", "model.zendesk.ticket_first_resolution_time_business", "model.zendesk.ticket_full_resolution_time_business", "model.zendesk.ticket_work_time_business"], "operation.zendesk.zendesk-on-run-start-0": [], "test.zendesk.unique_zendesk_ticket_enriched_ticket_id": [], "test.zendesk.not_null_zendesk_ticket_enriched_ticket_id": [], "test.zendesk.unique_zendesk_ticket_metrics_ticket_id": [], "test.zendesk.not_null_zendesk_ticket_metrics_ticket_id": [], "model.zendesk_source.stg_zendesk_user": ["model.zendesk.public_comments", "model.zendesk.reply_time_breach_combined", "model.zendesk.zendesk_ticket_enriched", "test.zendesk_source.not_null_stg_zendesk_user_user_id", "test.zendesk_source.unique_stg_zendesk_user_user_id"], "model.zendesk_source.stg_zendesk_ticket_field_history": ["model.zendesk.reply_time_breach_combined", "model.zendesk.sla_policy_applied", "model.zendesk.ticket_historical_status", "model.zendesk.zendesk_field_history_pivot"], "model.zendesk_source.stg_zendesk_group": ["model.zendesk.zendesk_ticket_enriched", "test.zendesk_source.not_null_stg_zendesk_group_group_id", "test.zendesk_source.unique_stg_zendesk_group_group_id"], "model.zendesk_source.stg_zendesk_organization": ["model.zendesk.zendesk_ticket_enriched", "test.zendesk_source.not_null_stg_zendesk_organization_organization_id", "test.zendesk_source.unique_stg_zendesk_organization_organization_id"], "model.zendesk_source.stg_zendesk_ticket_schedule": ["model.zendesk.ticket_schedules"], "model.zendesk_source.stg_zendesk_ticket_tag": ["model.zendesk.ticket_tags"], "model.zendesk_source.stg_zendesk_ticket_comment": ["model.zendesk.public_comments", "model.zendesk.reply_time_breach_combined", "test.zendesk_source.not_null_stg_zendesk_ticket_comment_ticket_comment_id", "test.zendesk_source.unique_stg_zendesk_ticket_comment_ticket_comment_id"], "model.zendesk_source.stg_zendesk_ticket": ["model.zendesk.sla_policy_applied", "model.zendesk.ticket_reply_times_calendar", "model.zendesk.ticket_resolution_times_calendar", "model.zendesk.ticket_schedules", "model.zendesk.zendesk_calendar_spine", "model.zendesk.zendesk_field_calendar_spine", "model.zendesk.zendesk_ticket_enriched", "test.zendesk_source.not_null_stg_zendesk_ticket_ticket_id", "test.zendesk_source.unique_stg_zendesk_ticket_ticket_id"], "model.zendesk_source.stg_zendesk_schedule": ["model.zendesk.agent_work_time_business_hours_breached", "model.zendesk.reply_time_business_hours_breached", "model.zendesk.ticket_first_reply_time_business", "model.zendesk.ticket_first_resolution_time_business", "model.zendesk.ticket_full_resolution_time_business", "model.zendesk.ticket_schedules", "model.zendesk.ticket_work_time_business"], "test.zendesk_source.unique_stg_zendesk_ticket_ticket_id": [], "test.zendesk_source.not_null_stg_zendesk_ticket_ticket_id": [], "test.zendesk_source.unique_stg_zendesk_group_group_id": [], "test.zendesk_source.not_null_stg_zendesk_group_group_id": [], "test.zendesk_source.unique_stg_zendesk_organization_organization_id": [], "test.zendesk_source.not_null_stg_zendesk_organization_organization_id": [], "test.zendesk_source.unique_stg_zendesk_ticket_comment_ticket_comment_id": [], "test.zendesk_source.not_null_stg_zendesk_ticket_comment_ticket_comment_id": [], "test.zendesk_source.unique_stg_zendesk_user_user_id": [], "test.zendesk_source.not_null_stg_zendesk_user_user_id": [], "test.zendesk_source.source_unique_zendesk_ticket_id": [], "test.zendesk_source.source_not_null_zendesk_ticket_id": [], "test.zendesk_source.source_unique_zendesk_group_id": [], "test.zendesk_source.source_not_null_zendesk_group_id": [], "test.zendesk_source.source_unique_zendesk_organization_id": [], "test.zendesk_source.source_not_null_zendesk_organization_id": [], "test.zendesk_source.source_unique_zendesk_ticket_comment_id": [], "test.zendesk_source.source_not_null_zendesk_ticket_comment_id": [], "test.zendesk_source.source_unique_zendesk_user_id": [], "test.zendesk_source.source_not_null_zendesk_user_id": [], "source.zendesk_source.zendesk.ticket": ["model.zendesk_source.stg_zendesk_ticket", "test.zendesk_source.source_not_null_zendesk_ticket_id", "test.zendesk_source.source_unique_zendesk_ticket_id"], "source.zendesk_source.zendesk.group": ["model.zendesk_source.stg_zendesk_group", "test.zendesk_source.source_not_null_zendesk_group_id", "test.zendesk_source.source_unique_zendesk_group_id"], "source.zendesk_source.zendesk.organization": ["model.zendesk_source.stg_zendesk_organization", "test.zendesk_source.source_not_null_zendesk_organization_id", "test.zendesk_source.source_unique_zendesk_organization_id"], "source.zendesk_source.zendesk.ticket_comment": ["model.zendesk_source.stg_zendesk_ticket_comment", "test.zendesk_source.source_not_null_zendesk_ticket_comment_id", "test.zendesk_source.source_unique_zendesk_ticket_comment_id"], "source.zendesk_source.zendesk.user": ["model.zendesk_source.stg_zendesk_user", "test.zendesk_source.source_not_null_zendesk_user_id", "test.zendesk_source.source_unique_zendesk_user_id"], "source.zendesk_source.zendesk.schedule": ["model.zendesk_source.stg_zendesk_schedule"], "source.zendesk_source.zendesk.ticket_schedule": ["model.zendesk_source.stg_zendesk_ticket_schedule"], "source.zendesk_source.zendesk.ticket_tag": ["model.zendesk_source.stg_zendesk_ticket_tag"], "source.zendesk_source.zendesk.ticket_field_history": ["model.zendesk_source.stg_zendesk_ticket_field_history"]}, "metadata": {"project_id": "01260647de9803dd69df3ecc34a8d908", "user_id": "17115028-2cdc-4f57-abce-f8b742a5937d", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}}